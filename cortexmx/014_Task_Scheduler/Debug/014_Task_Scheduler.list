
014_Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08001968  08001968  00011968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a70  08001a70  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001a70  08001a70  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a70  08001a70  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a70  08001a70  00011a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a74  08001a74  00011a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000068  08001ae0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08001ae0  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002de3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008f8  00000000  00000000  00022e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000208  00000000  00000000  00023778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001c0  00000000  00000000  00023980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002cff  00000000  00000000  00023b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001aee  00000000  00000000  0002683f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009759  00000000  00000000  0002832d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00031a86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e14  00000000  00000000  00031b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001950 	.word	0x08001950

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08001950 	.word	0x08001950

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <led_init_all>:
	for(uint32_t i=0; i<count; i++);
}


void led_init_all(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	uint32_t *pRccAhb1enr  = (uint32_t *)0x40023830;
 8000296:	4b19      	ldr	r3, [pc, #100]	; (80002fc <led_init_all+0x6c>)
 8000298:	607b      	str	r3, [r7, #4]
	uint32_t *pGpioModeReg = (uint32_t *)0x40020C00;
 800029a:	4b19      	ldr	r3, [pc, #100]	; (8000300 <led_init_all+0x70>)
 800029c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= (1 << 3);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f043 0208 	orr.w	r2, r3, #8
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	601a      	str	r2, [r3, #0]
	// Configuration of all LEDs
	*pGpioModeReg |= (1 << (2 * LED_GREEN));
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	601a      	str	r2, [r3, #0]
	*pGpioModeReg |= (1 << (2 * LED_ORANGE));
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	601a      	str	r2, [r3, #0]
	*pGpioModeReg |= (1 << (2 * LED_RED));
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	601a      	str	r2, [r3, #0]
	*pGpioModeReg |= (1 << (2 * LED_BLUE));
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	601a      	str	r2, [r3, #0]

	led_off(LED_GREEN);
 80002da:	200c      	movs	r0, #12
 80002dc:	f000 f82a 	bl	8000334 <led_off>
	led_off(LED_ORANGE);
 80002e0:	200d      	movs	r0, #13
 80002e2:	f000 f827 	bl	8000334 <led_off>
	led_off(LED_RED);
 80002e6:	200e      	movs	r0, #14
 80002e8:	f000 f824 	bl	8000334 <led_off>
	led_off(LED_BLUE);
 80002ec:	200f      	movs	r0, #15
 80002ee:	f000 f821 	bl	8000334 <led_off>

}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40023830 	.word	0x40023830
 8000300:	40020c00 	.word	0x40020c00

08000304 <led_on>:


void led_on(uint8_t led_no)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGpioDataReg = (uint32_t *)0x40020C14;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <led_on+0x2c>)
 8000310:	60fb      	str	r3, [r7, #12]
	*pGpioDataReg |= (1 << led_no);
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	79fa      	ldrb	r2, [r7, #7]
 8000318:	2101      	movs	r1, #1
 800031a:	fa01 f202 	lsl.w	r2, r1, r2
 800031e:	431a      	orrs	r2, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	601a      	str	r2, [r3, #0]
}
 8000324:	bf00      	nop
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40020c14 	.word	0x40020c14

08000334 <led_off>:


void led_off(uint8_t led_no)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGpioDataReg = (uint32_t *)0x40020C14;
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <led_off+0x30>)
 8000340:	60fb      	str	r3, [r7, #12]
	*pGpioDataReg &= ~(1 << led_no);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	79fa      	ldrb	r2, [r7, #7]
 8000348:	2101      	movs	r1, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	43d2      	mvns	r2, r2
 8000350:	401a      	ands	r2, r3
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40020c14 	.word	0x40020c14

08000368 <main>:

TCB_t user_tasks[MAX_TASKS];


int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	enable_processor_faults();
 800036c:	f000 f922 	bl	80005b4 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 8000370:	4807      	ldr	r0, [pc, #28]	; (8000390 <main+0x28>)
 8000372:	f000 f88b 	bl	800048c <init_scheduler_stack>

	init_task_stack();
 8000376:	f000 f88f 	bl	8000498 <init_task_stack>

	led_init_all();
 800037a:	f7ff ff89 	bl	8000290 <led_init_all>

	init_systick_timer(TICK_HZ);
 800037e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000382:	f000 f84b 	bl	800041c <init_systick_timer>

	switch_sp_to_psp();
 8000386:	f000 f9a1 	bl	80006cc <switch_sp_to_psp>

	task1_handler();
 800038a:	f000 f806 	bl	800039a <task1_handler>

	for(;;);
 800038e:	e7fe      	b.n	800038e <main+0x26>
 8000390:	2001ec00 	.word	0x2001ec00

08000394 <idle_task>:
}


void idle_task()
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	while(1);
 8000398:	e7fe      	b.n	8000398 <idle_task+0x4>

0800039a <task1_handler>:
}


void task1_handler(void)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 800039e:	200c      	movs	r0, #12
 80003a0:	f7ff ffb0 	bl	8000304 <led_on>
		task_delay(1000);
 80003a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a8:	f000 f9b2 	bl	8000710 <task_delay>
		led_off(LED_GREEN);
 80003ac:	200c      	movs	r0, #12
 80003ae:	f7ff ffc1 	bl	8000334 <led_off>
		task_delay(1000);
 80003b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b6:	f000 f9ab 	bl	8000710 <task_delay>
		led_on(LED_GREEN);
 80003ba:	e7f0      	b.n	800039e <task1_handler+0x4>

080003bc <task2_handler>:
	}
}

void task2_handler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 80003c0:	200d      	movs	r0, #13
 80003c2:	f7ff ff9f 	bl	8000304 <led_on>
		task_delay(500);
 80003c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ca:	f000 f9a1 	bl	8000710 <task_delay>
		led_off(LED_ORANGE);
 80003ce:	200d      	movs	r0, #13
 80003d0:	f7ff ffb0 	bl	8000334 <led_off>
		task_delay(500);
 80003d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d8:	f000 f99a 	bl	8000710 <task_delay>
		led_on(LED_ORANGE);
 80003dc:	e7f0      	b.n	80003c0 <task2_handler+0x4>

080003de <task3_handler>:
	}
}

void task3_handler(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 80003e2:	200e      	movs	r0, #14
 80003e4:	f7ff ff8e 	bl	8000304 <led_on>
		task_delay(250);
 80003e8:	20fa      	movs	r0, #250	; 0xfa
 80003ea:	f000 f991 	bl	8000710 <task_delay>
		led_off(LED_RED);
 80003ee:	200e      	movs	r0, #14
 80003f0:	f7ff ffa0 	bl	8000334 <led_off>
		task_delay(250);
 80003f4:	20fa      	movs	r0, #250	; 0xfa
 80003f6:	f000 f98b 	bl	8000710 <task_delay>
		led_on(LED_RED);
 80003fa:	e7f2      	b.n	80003e2 <task3_handler+0x4>

080003fc <task4_handler>:
	}
}

void task4_handler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000400:	200f      	movs	r0, #15
 8000402:	f7ff ff7f 	bl	8000304 <led_on>
		task_delay(125);
 8000406:	207d      	movs	r0, #125	; 0x7d
 8000408:	f000 f982 	bl	8000710 <task_delay>
		led_off(LED_BLUE);
 800040c:	200f      	movs	r0, #15
 800040e:	f7ff ff91 	bl	8000334 <led_off>
		task_delay(125);
 8000412:	207d      	movs	r0, #125	; 0x7d
 8000414:	f000 f97c 	bl	8000710 <task_delay>
		led_on(LED_BLUE);
 8000418:	e7f2      	b.n	8000400 <task4_handler+0x4>
	...

0800041c <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 800041c:	b480      	push	{r7}
 800041e:	b087      	sub	sp, #28
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t *)0xE000E014;
 8000424:	4b16      	ldr	r3, [pc, #88]	; (8000480 <init_systick_timer+0x64>)
 8000426:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t *)0xE000E010;
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <init_systick_timer+0x68>)
 800042a:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 800042c:	4a16      	ldr	r2, [pc, #88]	; (8000488 <init_systick_timer+0x6c>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	fbb2 f3f3 	udiv	r3, r2, r3
 8000434:	3b01      	subs	r3, #1
 8000436:	60fb      	str	r3, [r7, #12]

	// Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	601a      	str	r2, [r3, #0]

	// Load the value in to SVR
	*pSRVR |= count_value;
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	431a      	orrs	r2, r3
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	601a      	str	r2, [r3, #0]

	// Do some settings
	*pSCSR |= (1 << 1);  // Enable Systick exception request
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f043 0202 	orr.w	r2, r3, #2
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2);  // Indicates the clock source, processor clock source
 800045c:	693b      	ldr	r3, [r7, #16]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f043 0204 	orr.w	r2, r3, #4
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	601a      	str	r2, [r3, #0]

	// Enable the systick
	*pSCSR |= (1 << 0);  // Enable the counter
 8000468:	693b      	ldr	r3, [r7, #16]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f043 0201 	orr.w	r2, r3, #1
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	601a      	str	r2, [r3, #0]
}
 8000474:	bf00      	nop
 8000476:	371c      	adds	r7, #28
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	e000e014 	.word	0xe000e014
 8000484:	e000e010 	.word	0xe000e010
 8000488:	00f42400 	.word	0x00f42400

0800048c <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 800048c:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack));
 800048e:	f383 8808 	msr	MSP, r3
	// __asm volatile("MSR MSP, R0");  // We can use this also
	__asm volatile("BX LR");
 8000492:	4770      	bx	lr
}
 8000494:	bf00      	nop
	...

08000498 <init_task_stack>:


void init_task_stack(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_READY_STATE;
 800049e:	4b3a      	ldr	r3, [pc, #232]	; (8000588 <init_task_stack+0xf0>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80004a4:	4b38      	ldr	r3, [pc, #224]	; (8000588 <init_task_stack+0xf0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 80004aa:	4b37      	ldr	r3, [pc, #220]	; (8000588 <init_task_stack+0xf0>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 80004b2:	4b35      	ldr	r3, [pc, #212]	; (8000588 <init_task_stack+0xf0>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 80004ba:	4b33      	ldr	r3, [pc, #204]	; (8000588 <init_task_stack+0xf0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 80004c2:	4b31      	ldr	r3, [pc, #196]	; (8000588 <init_task_stack+0xf0>)
 80004c4:	4a31      	ldr	r2, [pc, #196]	; (800058c <init_task_stack+0xf4>)
 80004c6:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 80004c8:	4b2f      	ldr	r3, [pc, #188]	; (8000588 <init_task_stack+0xf0>)
 80004ca:	4a31      	ldr	r2, [pc, #196]	; (8000590 <init_task_stack+0xf8>)
 80004cc:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 80004ce:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <init_task_stack+0xf0>)
 80004d0:	4a30      	ldr	r2, [pc, #192]	; (8000594 <init_task_stack+0xfc>)
 80004d2:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 80004d4:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <init_task_stack+0xf0>)
 80004d6:	4a30      	ldr	r2, [pc, #192]	; (8000598 <init_task_stack+0x100>)
 80004d8:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 80004da:	4b2b      	ldr	r3, [pc, #172]	; (8000588 <init_task_stack+0xf0>)
 80004dc:	4a2f      	ldr	r2, [pc, #188]	; (800059c <init_task_stack+0x104>)
 80004de:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 80004e0:	4b29      	ldr	r3, [pc, #164]	; (8000588 <init_task_stack+0xf0>)
 80004e2:	4a2f      	ldr	r2, [pc, #188]	; (80005a0 <init_task_stack+0x108>)
 80004e4:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 80004e6:	4b28      	ldr	r3, [pc, #160]	; (8000588 <init_task_stack+0xf0>)
 80004e8:	4a2e      	ldr	r2, [pc, #184]	; (80005a4 <init_task_stack+0x10c>)
 80004ea:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 80004ec:	4b26      	ldr	r3, [pc, #152]	; (8000588 <init_task_stack+0xf0>)
 80004ee:	4a2e      	ldr	r2, [pc, #184]	; (80005a8 <init_task_stack+0x110>)
 80004f0:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 80004f2:	4b25      	ldr	r3, [pc, #148]	; (8000588 <init_task_stack+0xf0>)
 80004f4:	4a2d      	ldr	r2, [pc, #180]	; (80005ac <init_task_stack+0x114>)
 80004f6:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <init_task_stack+0xf0>)
 80004fa:	4a2d      	ldr	r2, [pc, #180]	; (80005b0 <init_task_stack+0x118>)
 80004fc:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t *pPSP;

	for(int i=0; i<MAX_TASKS; i++)
 80004fe:	2300      	movs	r3, #0
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	e037      	b.n	8000574 <init_task_stack+0xdc>
	{
		pPSP = (uint32_t *) user_tasks[i].psp_value;
 8000504:	4a20      	ldr	r2, [pc, #128]	; (8000588 <init_task_stack+0xf0>)
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	4413      	add	r3, r2
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	3b04      	subs	r3, #4
 8000514:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // 0x01000000
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800051c:	601a      	str	r2, [r3, #0]

		pPSP--;  // PC
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	3b04      	subs	r3, #4
 8000522:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000524:	4a18      	ldr	r2, [pc, #96]	; (8000588 <init_task_stack+0xf0>)
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	4413      	add	r3, r2
 800052c:	330c      	adds	r3, #12
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	461a      	mov	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	601a      	str	r2, [r3, #0]

		pPSP--;  // LR
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3b04      	subs	r3, #4
 800053a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f06f 0202 	mvn.w	r2, #2
 8000542:	601a      	str	r2, [r3, #0]

		for(int j=0; j<13; j++)  // This loop sets the all registers (R0 to R11 and above (not sure)) value as 0
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	e008      	b.n	800055c <init_task_stack+0xc4>
		{
			pPSP--;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3b04      	subs	r3, #4
 800054e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
		for(int j=0; j<13; j++)  // This loop sets the all registers (R0 to R11 and above (not sure)) value as 0
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3301      	adds	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b0c      	cmp	r3, #12
 8000560:	ddf3      	ble.n	800054a <init_task_stack+0xb2>
		}

		user_tasks[i].psp_value = (uint32_t)pPSP;  // psp_of_tasks is pointing to the last content of the stack
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	4908      	ldr	r1, [pc, #32]	; (8000588 <init_task_stack+0xf0>)
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	440b      	add	r3, r1
 800056c:	601a      	str	r2, [r3, #0]
	for(int i=0; i<MAX_TASKS; i++)
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	3301      	adds	r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	2b04      	cmp	r3, #4
 8000578:	ddc4      	ble.n	8000504 <init_task_stack+0x6c>

	}
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000094 	.word	0x20000094
 800058c:	2001f000 	.word	0x2001f000
 8000590:	20020000 	.word	0x20020000
 8000594:	2001fc00 	.word	0x2001fc00
 8000598:	2001f800 	.word	0x2001f800
 800059c:	2001f400 	.word	0x2001f400
 80005a0:	08000395 	.word	0x08000395
 80005a4:	0800039b 	.word	0x0800039b
 80005a8:	080003bd 	.word	0x080003bd
 80005ac:	080003df 	.word	0x080003df
 80005b0:	080003fd 	.word	0x080003fd

080005b4 <enable_processor_faults>:


void enable_processor_faults(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
	// 1. Enable all configurable exceptions like usage fault, mem manage fault and bus fault
		uint32_t *pSHCSR = (uint32_t *)0xE000ED24;
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <enable_processor_faults+0x3c>)
 80005bc:	607b      	str	r3, [r7, #4]

		*pSHCSR |= (1 << 16); // MemManage Fault
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
		*pSHCSR |= (1 << 17); // Bus Fault
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
		*pSHCSR |= (1 << 18); // Usage Fault
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed24 	.word	0xe000ed24

080005f4 <get_psp_value>:


uint32_t get_psp_value(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <get_psp_value+0x1c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <get_psp_value+0x20>)
 80005fe:	011b      	lsls	r3, r3, #4
 8000600:	4413      	add	r3, r2
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000
 8000614:	20000094 	.word	0x20000094

08000618 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <save_psp_value+0x24>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <save_psp_value+0x28>)
 8000626:	011b      	lsls	r3, r3, #4
 8000628:	4413      	add	r3, r2
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	601a      	str	r2, [r3, #0]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000000 	.word	0x20000000
 8000640:	20000094 	.word	0x20000094

08000644 <update_next_task>:


void update_next_task(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 800064a:	23ff      	movs	r3, #255	; 0xff
 800064c:	607b      	str	r3, [r7, #4]

	for(int i=0; i<(MAX_TASKS); i++)
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	e024      	b.n	800069e <update_next_task+0x5a>
	{
		current_task++;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <update_next_task+0x7c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <update_next_task+0x7c>)
 800065e:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <update_next_task+0x7c>)
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <update_next_task+0x80>)
 8000666:	fba3 1302 	umull	r1, r3, r3, r2
 800066a:	0899      	lsrs	r1, r3, #2
 800066c:	460b      	mov	r3, r1
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <update_next_task+0x7c>)
 8000678:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <update_next_task+0x7c>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <update_next_task+0x84>)
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	4413      	add	r3, r2
 8000684:	3308      	adds	r3, #8
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	607b      	str	r3, [r7, #4]
		if((state == TASK_READY_STATE) && (current_task != 0))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d103      	bne.n	8000698 <update_next_task+0x54>
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <update_next_task+0x7c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d106      	bne.n	80006a6 <update_next_task+0x62>
	for(int i=0; i<(MAX_TASKS); i++)
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	ddd7      	ble.n	8000654 <update_next_task+0x10>
 80006a4:	e000      	b.n	80006a8 <update_next_task+0x64>
			break;
 80006a6:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <update_next_task+0x70>
		current_task = 0;
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <update_next_task+0x7c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	20000000 	.word	0x20000000
 80006c4:	cccccccd 	.word	0xcccccccd
 80006c8:	20000094 	.word	0x20000094

080006cc <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
	// 1. Initialize the PSP with TASK1 stack start address

	// Get the value of PSP of current task
	__asm volatile("PUSH {LR}");    // Preserve LR which connects back to main()
 80006cc:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 80006ce:	f7ff ff91 	bl	80005f4 <get_psp_value>
	__asm volatile("MSR PSP, R0");
 80006d2:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");     // Pops back LR value
 80006d6:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. Change SP to PSP using CONTROL register
	__asm volatile("MOV R0, #0x02");
 80006da:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 80006de:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80006e2:	4770      	bx	lr
}
 80006e4:	bf00      	nop
	...

080006e8 <schedule>:


void schedule(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
	// Pend the pendsv exception
		uint32_t *pICSR = (uint32_t *)0xE000ED04;
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <schedule+0x24>)
 80006f0:	607b      	str	r3, [r7, #4]
		*pICSR |= (1 << 28);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed04 	.word	0xe000ed04

08000710 <task_delay>:


void task_delay(uint32_t tick_count)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	// disable interrupt
	INTERRUPT_DISABLE();
 8000718:	f04f 0001 	mov.w	r0, #1
 800071c:	f380 8810 	msr	PRIMASK, r0

	if(current_task)
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <task_delay+0x54>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d015      	beq.n	8000754 <task_delay+0x44>
	{
		user_tasks[current_task].block_count   = g_tick_count + tick_count;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <task_delay+0x58>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <task_delay+0x54>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	441a      	add	r2, r3
 8000736:	490d      	ldr	r1, [pc, #52]	; (800076c <task_delay+0x5c>)
 8000738:	0103      	lsls	r3, r0, #4
 800073a:	440b      	add	r3, r1
 800073c:	3304      	adds	r3, #4
 800073e:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <task_delay+0x54>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <task_delay+0x5c>)
 8000746:	011b      	lsls	r3, r3, #4
 8000748:	4413      	add	r3, r2
 800074a:	3308      	adds	r3, #8
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	701a      	strb	r2, [r3, #0]
		schedule();
 8000750:	f7ff ffca 	bl	80006e8 <schedule>
	}

	// enable interrupt
	INTERRUPT_ENABLE();
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	f380 8810 	msr	PRIMASK, r0
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000000 	.word	0x20000000
 8000768:	20000084 	.word	0x20000084
 800076c:	20000094 	.word	0x20000094

08000770 <PendSV_Handler>:
{

	/* Save the context of current task */

		// 1. Get current task's PSP value
		__asm volatile("MRS R0, PSP");
 8000770:	f3ef 8009 	mrs	r0, PSP
		// 2. Using that PSP value store SF2 (R0 to R11)
		__asm volatile("STMDB R0!,{R4-R11}");
 8000774:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		__asm volatile("PUSH {LR}");
 8000778:	b500      	push	{lr}

		// 3. Save the current value of PSP
		__asm volatile("BL save_psp_value");
 800077a:	f7ff ff4d 	bl	8000618 <save_psp_value>


		/* Retrieve the context of next task */

		// 1. Decide next task to run
		__asm volatile("BL update_next_task");
 800077e:	f7ff ff61 	bl	8000644 <update_next_task>

		// 2. Get it's past PSP value
		__asm volatile("BL get_psp_value");
 8000782:	f7ff ff37 	bl	80005f4 <get_psp_value>

		// 3. Using that PSP value retrieve SF2 (R4 to R11)
		__asm volatile("LDMIA R0!, {R4-R11}");
 8000786:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		// 4. Update PSP and exit
		__asm volatile("MSR PSP, R0");
 800078a:	f380 8809 	msr	PSP, r0

		__asm volatile("POP {LR}");
 800078e:	f85d eb04 	ldr.w	lr, [sp], #4

		__asm volatile("BX LR");
 8000792:	4770      	bx	lr
}
 8000794:	bf00      	nop
	...

08000798 <update_global_tick_count>:


void update_global_tick_count(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	g_tick_count++;
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <update_global_tick_count+0x18>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <update_global_tick_count+0x18>)
 80007a4:	6013      	str	r3, [r2, #0]
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	20000084 	.word	0x20000084

080007b4 <unblock_tasks>:


void unblock_tasks(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
	for(int i=1; i<MAX_TASKS; i++)
 80007ba:	2301      	movs	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	e01b      	b.n	80007f8 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <unblock_tasks+0x58>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	4413      	add	r3, r2
 80007c8:	3308      	adds	r3, #8
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d010      	beq.n	80007f2 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 80007d0:	4a0e      	ldr	r2, [pc, #56]	; (800080c <unblock_tasks+0x58>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	4413      	add	r3, r2
 80007d8:	3304      	adds	r3, #4
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <unblock_tasks+0x5c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d106      	bne.n	80007f2 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80007e4:	4a09      	ldr	r2, [pc, #36]	; (800080c <unblock_tasks+0x58>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	4413      	add	r3, r2
 80007ec:	3308      	adds	r3, #8
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<MAX_TASKS; i++)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3301      	adds	r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	dde0      	ble.n	80007c0 <unblock_tasks+0xc>
			}
		}
	}
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000094 	.word	0x20000094
 8000810:	20000084 	.word	0x20000084

08000814 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	update_global_tick_count();
 8000818:	f7ff ffbe 	bl	8000798 <update_global_tick_count>
	unblock_tasks();
 800081c:	f7ff ffca 	bl	80007b4 <unblock_tasks>
	schedule();
 8000820:	f7ff ff62 	bl	80006e8 <schedule>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <HardFault_Handler>:


// 2. Implement the fault handlers
void HardFault_Handler()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	printf("Exception: Hard Fault\n");
 800082c:	4801      	ldr	r0, [pc, #4]	; (8000834 <HardFault_Handler+0xc>)
 800082e:	f000 f9bb 	bl	8000ba8 <puts>
	while(1);
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0xa>
 8000834:	08001968 	.word	0x08001968

08000838 <MemManage_Handler>:
}

void MemManage_Handler()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	printf("Exception: MemManage Fault\n");
 800083c:	4801      	ldr	r0, [pc, #4]	; (8000844 <MemManage_Handler+0xc>)
 800083e:	f000 f9b3 	bl	8000ba8 <puts>
	while(1);
 8000842:	e7fe      	b.n	8000842 <MemManage_Handler+0xa>
 8000844:	08001980 	.word	0x08001980

08000848 <BusFault_Handler>:
}

void BusFault_Handler()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	printf("Exception: Bus Fault\n");
 800084c:	4801      	ldr	r0, [pc, #4]	; (8000854 <BusFault_Handler+0xc>)
 800084e:	f000 f9ab 	bl	8000ba8 <puts>
	while(1);
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0xa>
 8000854:	0800199c 	.word	0x0800199c

08000858 <UsageFault_Handler>:
}

void UsageFault_Handler()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
	uint32_t *pUFSR = (uint32_t *)0xE000ED2A;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <UsageFault_Handler+0x20>)
 8000860:	607b      	str	r3, [r7, #4]
	printf("Exception: Usage Fault\n");
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <UsageFault_Handler+0x24>)
 8000864:	f000 f9a0 	bl	8000ba8 <puts>
	printf("UFSR = %lx\n", (*pUFSR) & 0xFFFF);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	b29b      	uxth	r3, r3
 800086e:	4619      	mov	r1, r3
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <UsageFault_Handler+0x28>)
 8000872:	f000 f925 	bl	8000ac0 <iprintf>
	while(1);
 8000876:	e7fe      	b.n	8000876 <UsageFault_Handler+0x1e>
 8000878:	e000ed2a 	.word	0xe000ed2a
 800087c:	080019b4 	.word	0x080019b4
 8000880:	080019cc 	.word	0x080019cc

08000884 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <ITM_SendChar+0x48>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <ITM_SendChar+0x48>)
 8000894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000898:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <ITM_SendChar+0x4c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <ITM_SendChar+0x4c>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008a6:	bf00      	nop
 80008a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f8      	beq.n	80008a8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	6013      	str	r3, [r2, #0]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000edfc 	.word	0xe000edfc
 80008d0:	e0000e00 	.word	0xe0000e00

080008d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e00a      	b.n	80008fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008e6:	f3af 8000 	nop.w
 80008ea:	4601      	mov	r1, r0
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	60ba      	str	r2, [r7, #8]
 80008f2:	b2ca      	uxtb	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbf0      	blt.n	80008e6 <_read+0x12>
	}

return len;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	e009      	b.n	8000934 <_write+0x26>
	{
		//__io_putchar(*ptr++);
	    ITM_SendChar(*ptr++);
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	60ba      	str	r2, [r7, #8]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ffab 	bl	8000884 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	3301      	adds	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	429a      	cmp	r2, r3
 800093a:	dbf1      	blt.n	8000920 <_write+0x12>

	}
	return len;
 800093c:	687b      	ldr	r3, [r7, #4]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_close>:

int _close(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
	return -1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096e:	605a      	str	r2, [r3, #4]
	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <_isatty>:

int _isatty(int file)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
	return 1;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
	return 0;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x50>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <_sbrk+0x16>
		heap_end = &end;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <_sbrk+0x50>)
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <_sbrk+0x54>)
 80009c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <_sbrk+0x50>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <_sbrk+0x50>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4413      	add	r3, r2
 80009d4:	466a      	mov	r2, sp
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d907      	bls.n	80009ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80009da:	f000 f83f 	bl	8000a5c <__errno>
 80009de:	4602      	mov	r2, r0
 80009e0:	230c      	movs	r3, #12
 80009e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	e006      	b.n	80009f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_sbrk+0x50>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <_sbrk+0x50>)
 80009f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009f6:	68fb      	ldr	r3, [r7, #12]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000088 	.word	0x20000088
 8000a04:	200000e8 	.word	0x200000e8

08000a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490e      	ldr	r1, [pc, #56]	; (8000a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0b      	ldr	r4, [pc, #44]	; (8000a54 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a32:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000a36:	f000 f817 	bl	8000a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3a:	f7ff fc95 	bl	8000368 <main>

08000a3e <LoopForever>:

LoopForever:
    b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   r0, =_estack
 8000a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a4c:	08001a78 	.word	0x08001a78
  ldr r2, =_sbss
 8000a50:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a54:	200000e8 	.word	0x200000e8

08000a58 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC_IRQHandler>
	...

08000a5c <__errno>:
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <__errno+0x8>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000004 	.word	0x20000004

08000a68 <__libc_init_array>:
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	4e0d      	ldr	r6, [pc, #52]	; (8000aa0 <__libc_init_array+0x38>)
 8000a6c:	4c0d      	ldr	r4, [pc, #52]	; (8000aa4 <__libc_init_array+0x3c>)
 8000a6e:	1ba4      	subs	r4, r4, r6
 8000a70:	10a4      	asrs	r4, r4, #2
 8000a72:	2500      	movs	r5, #0
 8000a74:	42a5      	cmp	r5, r4
 8000a76:	d109      	bne.n	8000a8c <__libc_init_array+0x24>
 8000a78:	4e0b      	ldr	r6, [pc, #44]	; (8000aa8 <__libc_init_array+0x40>)
 8000a7a:	4c0c      	ldr	r4, [pc, #48]	; (8000aac <__libc_init_array+0x44>)
 8000a7c:	f000 ff68 	bl	8001950 <_init>
 8000a80:	1ba4      	subs	r4, r4, r6
 8000a82:	10a4      	asrs	r4, r4, #2
 8000a84:	2500      	movs	r5, #0
 8000a86:	42a5      	cmp	r5, r4
 8000a88:	d105      	bne.n	8000a96 <__libc_init_array+0x2e>
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a90:	4798      	blx	r3
 8000a92:	3501      	adds	r5, #1
 8000a94:	e7ee      	b.n	8000a74 <__libc_init_array+0xc>
 8000a96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a9a:	4798      	blx	r3
 8000a9c:	3501      	adds	r5, #1
 8000a9e:	e7f2      	b.n	8000a86 <__libc_init_array+0x1e>
 8000aa0:	08001a70 	.word	0x08001a70
 8000aa4:	08001a70 	.word	0x08001a70
 8000aa8:	08001a70 	.word	0x08001a70
 8000aac:	08001a74 	.word	0x08001a74

08000ab0 <memset>:
 8000ab0:	4402      	add	r2, r0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d100      	bne.n	8000aba <memset+0xa>
 8000ab8:	4770      	bx	lr
 8000aba:	f803 1b01 	strb.w	r1, [r3], #1
 8000abe:	e7f9      	b.n	8000ab4 <memset+0x4>

08000ac0 <iprintf>:
 8000ac0:	b40f      	push	{r0, r1, r2, r3}
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <iprintf+0x2c>)
 8000ac4:	b513      	push	{r0, r1, r4, lr}
 8000ac6:	681c      	ldr	r4, [r3, #0]
 8000ac8:	b124      	cbz	r4, 8000ad4 <iprintf+0x14>
 8000aca:	69a3      	ldr	r3, [r4, #24]
 8000acc:	b913      	cbnz	r3, 8000ad4 <iprintf+0x14>
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f000 fa22 	bl	8000f18 <__sinit>
 8000ad4:	ab05      	add	r3, sp, #20
 8000ad6:	9a04      	ldr	r2, [sp, #16]
 8000ad8:	68a1      	ldr	r1, [r4, #8]
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	4620      	mov	r0, r4
 8000ade:	f000 fbdb 	bl	8001298 <_vfiprintf_r>
 8000ae2:	b002      	add	sp, #8
 8000ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr
 8000aec:	20000004 	.word	0x20000004

08000af0 <_puts_r>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	460e      	mov	r6, r1
 8000af4:	4605      	mov	r5, r0
 8000af6:	b118      	cbz	r0, 8000b00 <_puts_r+0x10>
 8000af8:	6983      	ldr	r3, [r0, #24]
 8000afa:	b90b      	cbnz	r3, 8000b00 <_puts_r+0x10>
 8000afc:	f000 fa0c 	bl	8000f18 <__sinit>
 8000b00:	69ab      	ldr	r3, [r5, #24]
 8000b02:	68ac      	ldr	r4, [r5, #8]
 8000b04:	b913      	cbnz	r3, 8000b0c <_puts_r+0x1c>
 8000b06:	4628      	mov	r0, r5
 8000b08:	f000 fa06 	bl	8000f18 <__sinit>
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <_puts_r+0xac>)
 8000b0e:	429c      	cmp	r4, r3
 8000b10:	d117      	bne.n	8000b42 <_puts_r+0x52>
 8000b12:	686c      	ldr	r4, [r5, #4]
 8000b14:	89a3      	ldrh	r3, [r4, #12]
 8000b16:	071b      	lsls	r3, r3, #28
 8000b18:	d51d      	bpl.n	8000b56 <_puts_r+0x66>
 8000b1a:	6923      	ldr	r3, [r4, #16]
 8000b1c:	b1db      	cbz	r3, 8000b56 <_puts_r+0x66>
 8000b1e:	3e01      	subs	r6, #1
 8000b20:	68a3      	ldr	r3, [r4, #8]
 8000b22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b26:	3b01      	subs	r3, #1
 8000b28:	60a3      	str	r3, [r4, #8]
 8000b2a:	b9e9      	cbnz	r1, 8000b68 <_puts_r+0x78>
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	da2e      	bge.n	8000b8e <_puts_r+0x9e>
 8000b30:	4622      	mov	r2, r4
 8000b32:	210a      	movs	r1, #10
 8000b34:	4628      	mov	r0, r5
 8000b36:	f000 f83f 	bl	8000bb8 <__swbuf_r>
 8000b3a:	3001      	adds	r0, #1
 8000b3c:	d011      	beq.n	8000b62 <_puts_r+0x72>
 8000b3e:	200a      	movs	r0, #10
 8000b40:	e011      	b.n	8000b66 <_puts_r+0x76>
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <_puts_r+0xb0>)
 8000b44:	429c      	cmp	r4, r3
 8000b46:	d101      	bne.n	8000b4c <_puts_r+0x5c>
 8000b48:	68ac      	ldr	r4, [r5, #8]
 8000b4a:	e7e3      	b.n	8000b14 <_puts_r+0x24>
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <_puts_r+0xb4>)
 8000b4e:	429c      	cmp	r4, r3
 8000b50:	bf08      	it	eq
 8000b52:	68ec      	ldreq	r4, [r5, #12]
 8000b54:	e7de      	b.n	8000b14 <_puts_r+0x24>
 8000b56:	4621      	mov	r1, r4
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f000 f87f 	bl	8000c5c <__swsetup_r>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d0dd      	beq.n	8000b1e <_puts_r+0x2e>
 8000b62:	f04f 30ff 	mov.w	r0, #4294967295
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	da04      	bge.n	8000b76 <_puts_r+0x86>
 8000b6c:	69a2      	ldr	r2, [r4, #24]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dc06      	bgt.n	8000b80 <_puts_r+0x90>
 8000b72:	290a      	cmp	r1, #10
 8000b74:	d004      	beq.n	8000b80 <_puts_r+0x90>
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	6022      	str	r2, [r4, #0]
 8000b7c:	7019      	strb	r1, [r3, #0]
 8000b7e:	e7cf      	b.n	8000b20 <_puts_r+0x30>
 8000b80:	4622      	mov	r2, r4
 8000b82:	4628      	mov	r0, r5
 8000b84:	f000 f818 	bl	8000bb8 <__swbuf_r>
 8000b88:	3001      	adds	r0, #1
 8000b8a:	d1c9      	bne.n	8000b20 <_puts_r+0x30>
 8000b8c:	e7e9      	b.n	8000b62 <_puts_r+0x72>
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	200a      	movs	r0, #10
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	6022      	str	r2, [r4, #0]
 8000b96:	7018      	strb	r0, [r3, #0]
 8000b98:	e7e5      	b.n	8000b66 <_puts_r+0x76>
 8000b9a:	bf00      	nop
 8000b9c:	080019fc 	.word	0x080019fc
 8000ba0:	08001a1c 	.word	0x08001a1c
 8000ba4:	080019dc 	.word	0x080019dc

08000ba8 <puts>:
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <puts+0xc>)
 8000baa:	4601      	mov	r1, r0
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	f7ff bf9f 	b.w	8000af0 <_puts_r>
 8000bb2:	bf00      	nop
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <__swbuf_r>:
 8000bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bba:	460e      	mov	r6, r1
 8000bbc:	4614      	mov	r4, r2
 8000bbe:	4605      	mov	r5, r0
 8000bc0:	b118      	cbz	r0, 8000bca <__swbuf_r+0x12>
 8000bc2:	6983      	ldr	r3, [r0, #24]
 8000bc4:	b90b      	cbnz	r3, 8000bca <__swbuf_r+0x12>
 8000bc6:	f000 f9a7 	bl	8000f18 <__sinit>
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <__swbuf_r+0x98>)
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d12a      	bne.n	8000c26 <__swbuf_r+0x6e>
 8000bd0:	686c      	ldr	r4, [r5, #4]
 8000bd2:	69a3      	ldr	r3, [r4, #24]
 8000bd4:	60a3      	str	r3, [r4, #8]
 8000bd6:	89a3      	ldrh	r3, [r4, #12]
 8000bd8:	071a      	lsls	r2, r3, #28
 8000bda:	d52e      	bpl.n	8000c3a <__swbuf_r+0x82>
 8000bdc:	6923      	ldr	r3, [r4, #16]
 8000bde:	b363      	cbz	r3, 8000c3a <__swbuf_r+0x82>
 8000be0:	6923      	ldr	r3, [r4, #16]
 8000be2:	6820      	ldr	r0, [r4, #0]
 8000be4:	1ac0      	subs	r0, r0, r3
 8000be6:	6963      	ldr	r3, [r4, #20]
 8000be8:	b2f6      	uxtb	r6, r6
 8000bea:	4283      	cmp	r3, r0
 8000bec:	4637      	mov	r7, r6
 8000bee:	dc04      	bgt.n	8000bfa <__swbuf_r+0x42>
 8000bf0:	4621      	mov	r1, r4
 8000bf2:	4628      	mov	r0, r5
 8000bf4:	f000 f926 	bl	8000e44 <_fflush_r>
 8000bf8:	bb28      	cbnz	r0, 8000c46 <__swbuf_r+0x8e>
 8000bfa:	68a3      	ldr	r3, [r4, #8]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	60a3      	str	r3, [r4, #8]
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	6022      	str	r2, [r4, #0]
 8000c06:	701e      	strb	r6, [r3, #0]
 8000c08:	6963      	ldr	r3, [r4, #20]
 8000c0a:	3001      	adds	r0, #1
 8000c0c:	4283      	cmp	r3, r0
 8000c0e:	d004      	beq.n	8000c1a <__swbuf_r+0x62>
 8000c10:	89a3      	ldrh	r3, [r4, #12]
 8000c12:	07db      	lsls	r3, r3, #31
 8000c14:	d519      	bpl.n	8000c4a <__swbuf_r+0x92>
 8000c16:	2e0a      	cmp	r6, #10
 8000c18:	d117      	bne.n	8000c4a <__swbuf_r+0x92>
 8000c1a:	4621      	mov	r1, r4
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	f000 f911 	bl	8000e44 <_fflush_r>
 8000c22:	b190      	cbz	r0, 8000c4a <__swbuf_r+0x92>
 8000c24:	e00f      	b.n	8000c46 <__swbuf_r+0x8e>
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <__swbuf_r+0x9c>)
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	d101      	bne.n	8000c30 <__swbuf_r+0x78>
 8000c2c:	68ac      	ldr	r4, [r5, #8]
 8000c2e:	e7d0      	b.n	8000bd2 <__swbuf_r+0x1a>
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <__swbuf_r+0xa0>)
 8000c32:	429c      	cmp	r4, r3
 8000c34:	bf08      	it	eq
 8000c36:	68ec      	ldreq	r4, [r5, #12]
 8000c38:	e7cb      	b.n	8000bd2 <__swbuf_r+0x1a>
 8000c3a:	4621      	mov	r1, r4
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	f000 f80d 	bl	8000c5c <__swsetup_r>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	d0cc      	beq.n	8000be0 <__swbuf_r+0x28>
 8000c46:	f04f 37ff 	mov.w	r7, #4294967295
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	080019fc 	.word	0x080019fc
 8000c54:	08001a1c 	.word	0x08001a1c
 8000c58:	080019dc 	.word	0x080019dc

08000c5c <__swsetup_r>:
 8000c5c:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <__swsetup_r+0xcc>)
 8000c5e:	b570      	push	{r4, r5, r6, lr}
 8000c60:	681d      	ldr	r5, [r3, #0]
 8000c62:	4606      	mov	r6, r0
 8000c64:	460c      	mov	r4, r1
 8000c66:	b125      	cbz	r5, 8000c72 <__swsetup_r+0x16>
 8000c68:	69ab      	ldr	r3, [r5, #24]
 8000c6a:	b913      	cbnz	r3, 8000c72 <__swsetup_r+0x16>
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	f000 f953 	bl	8000f18 <__sinit>
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <__swsetup_r+0xd0>)
 8000c74:	429c      	cmp	r4, r3
 8000c76:	d10f      	bne.n	8000c98 <__swsetup_r+0x3c>
 8000c78:	686c      	ldr	r4, [r5, #4]
 8000c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	0715      	lsls	r5, r2, #28
 8000c82:	d42c      	bmi.n	8000cde <__swsetup_r+0x82>
 8000c84:	06d0      	lsls	r0, r2, #27
 8000c86:	d411      	bmi.n	8000cac <__swsetup_r+0x50>
 8000c88:	2209      	movs	r2, #9
 8000c8a:	6032      	str	r2, [r6, #0]
 8000c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c90:	81a3      	strh	r3, [r4, #12]
 8000c92:	f04f 30ff 	mov.w	r0, #4294967295
 8000c96:	e03e      	b.n	8000d16 <__swsetup_r+0xba>
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <__swsetup_r+0xd4>)
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	d101      	bne.n	8000ca2 <__swsetup_r+0x46>
 8000c9e:	68ac      	ldr	r4, [r5, #8]
 8000ca0:	e7eb      	b.n	8000c7a <__swsetup_r+0x1e>
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <__swsetup_r+0xd8>)
 8000ca4:	429c      	cmp	r4, r3
 8000ca6:	bf08      	it	eq
 8000ca8:	68ec      	ldreq	r4, [r5, #12]
 8000caa:	e7e6      	b.n	8000c7a <__swsetup_r+0x1e>
 8000cac:	0751      	lsls	r1, r2, #29
 8000cae:	d512      	bpl.n	8000cd6 <__swsetup_r+0x7a>
 8000cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cb2:	b141      	cbz	r1, 8000cc6 <__swsetup_r+0x6a>
 8000cb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d002      	beq.n	8000cc2 <__swsetup_r+0x66>
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	f000 fa19 	bl	80010f4 <_free_r>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	6363      	str	r3, [r4, #52]	; 0x34
 8000cc6:	89a3      	ldrh	r3, [r4, #12]
 8000cc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000ccc:	81a3      	strh	r3, [r4, #12]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	6063      	str	r3, [r4, #4]
 8000cd2:	6923      	ldr	r3, [r4, #16]
 8000cd4:	6023      	str	r3, [r4, #0]
 8000cd6:	89a3      	ldrh	r3, [r4, #12]
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	81a3      	strh	r3, [r4, #12]
 8000cde:	6923      	ldr	r3, [r4, #16]
 8000ce0:	b94b      	cbnz	r3, 8000cf6 <__swsetup_r+0x9a>
 8000ce2:	89a3      	ldrh	r3, [r4, #12]
 8000ce4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cec:	d003      	beq.n	8000cf6 <__swsetup_r+0x9a>
 8000cee:	4621      	mov	r1, r4
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	f000 f9bf 	bl	8001074 <__smakebuf_r>
 8000cf6:	89a2      	ldrh	r2, [r4, #12]
 8000cf8:	f012 0301 	ands.w	r3, r2, #1
 8000cfc:	d00c      	beq.n	8000d18 <__swsetup_r+0xbc>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60a3      	str	r3, [r4, #8]
 8000d02:	6963      	ldr	r3, [r4, #20]
 8000d04:	425b      	negs	r3, r3
 8000d06:	61a3      	str	r3, [r4, #24]
 8000d08:	6923      	ldr	r3, [r4, #16]
 8000d0a:	b953      	cbnz	r3, 8000d22 <__swsetup_r+0xc6>
 8000d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000d14:	d1ba      	bne.n	8000c8c <__swsetup_r+0x30>
 8000d16:	bd70      	pop	{r4, r5, r6, pc}
 8000d18:	0792      	lsls	r2, r2, #30
 8000d1a:	bf58      	it	pl
 8000d1c:	6963      	ldrpl	r3, [r4, #20]
 8000d1e:	60a3      	str	r3, [r4, #8]
 8000d20:	e7f2      	b.n	8000d08 <__swsetup_r+0xac>
 8000d22:	2000      	movs	r0, #0
 8000d24:	e7f7      	b.n	8000d16 <__swsetup_r+0xba>
 8000d26:	bf00      	nop
 8000d28:	20000004 	.word	0x20000004
 8000d2c:	080019fc 	.word	0x080019fc
 8000d30:	08001a1c 	.word	0x08001a1c
 8000d34:	080019dc 	.word	0x080019dc

08000d38 <__sflush_r>:
 8000d38:	898a      	ldrh	r2, [r1, #12]
 8000d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d3e:	4605      	mov	r5, r0
 8000d40:	0710      	lsls	r0, r2, #28
 8000d42:	460c      	mov	r4, r1
 8000d44:	d458      	bmi.n	8000df8 <__sflush_r+0xc0>
 8000d46:	684b      	ldr	r3, [r1, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	dc05      	bgt.n	8000d58 <__sflush_r+0x20>
 8000d4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	dc02      	bgt.n	8000d58 <__sflush_r+0x20>
 8000d52:	2000      	movs	r0, #0
 8000d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d0f9      	beq.n	8000d52 <__sflush_r+0x1a>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000d64:	682f      	ldr	r7, [r5, #0]
 8000d66:	6a21      	ldr	r1, [r4, #32]
 8000d68:	602b      	str	r3, [r5, #0]
 8000d6a:	d032      	beq.n	8000dd2 <__sflush_r+0x9a>
 8000d6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d6e:	89a3      	ldrh	r3, [r4, #12]
 8000d70:	075a      	lsls	r2, r3, #29
 8000d72:	d505      	bpl.n	8000d80 <__sflush_r+0x48>
 8000d74:	6863      	ldr	r3, [r4, #4]
 8000d76:	1ac0      	subs	r0, r0, r3
 8000d78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d7a:	b10b      	cbz	r3, 8000d80 <__sflush_r+0x48>
 8000d7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d7e:	1ac0      	subs	r0, r0, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	4602      	mov	r2, r0
 8000d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d86:	6a21      	ldr	r1, [r4, #32]
 8000d88:	4628      	mov	r0, r5
 8000d8a:	47b0      	blx	r6
 8000d8c:	1c43      	adds	r3, r0, #1
 8000d8e:	89a3      	ldrh	r3, [r4, #12]
 8000d90:	d106      	bne.n	8000da0 <__sflush_r+0x68>
 8000d92:	6829      	ldr	r1, [r5, #0]
 8000d94:	291d      	cmp	r1, #29
 8000d96:	d848      	bhi.n	8000e2a <__sflush_r+0xf2>
 8000d98:	4a29      	ldr	r2, [pc, #164]	; (8000e40 <__sflush_r+0x108>)
 8000d9a:	40ca      	lsrs	r2, r1
 8000d9c:	07d6      	lsls	r6, r2, #31
 8000d9e:	d544      	bpl.n	8000e2a <__sflush_r+0xf2>
 8000da0:	2200      	movs	r2, #0
 8000da2:	6062      	str	r2, [r4, #4]
 8000da4:	04d9      	lsls	r1, r3, #19
 8000da6:	6922      	ldr	r2, [r4, #16]
 8000da8:	6022      	str	r2, [r4, #0]
 8000daa:	d504      	bpl.n	8000db6 <__sflush_r+0x7e>
 8000dac:	1c42      	adds	r2, r0, #1
 8000dae:	d101      	bne.n	8000db4 <__sflush_r+0x7c>
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	b903      	cbnz	r3, 8000db6 <__sflush_r+0x7e>
 8000db4:	6560      	str	r0, [r4, #84]	; 0x54
 8000db6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000db8:	602f      	str	r7, [r5, #0]
 8000dba:	2900      	cmp	r1, #0
 8000dbc:	d0c9      	beq.n	8000d52 <__sflush_r+0x1a>
 8000dbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d002      	beq.n	8000dcc <__sflush_r+0x94>
 8000dc6:	4628      	mov	r0, r5
 8000dc8:	f000 f994 	bl	80010f4 <_free_r>
 8000dcc:	2000      	movs	r0, #0
 8000dce:	6360      	str	r0, [r4, #52]	; 0x34
 8000dd0:	e7c0      	b.n	8000d54 <__sflush_r+0x1c>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	47b0      	blx	r6
 8000dd8:	1c41      	adds	r1, r0, #1
 8000dda:	d1c8      	bne.n	8000d6e <__sflush_r+0x36>
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0c5      	beq.n	8000d6e <__sflush_r+0x36>
 8000de2:	2b1d      	cmp	r3, #29
 8000de4:	d001      	beq.n	8000dea <__sflush_r+0xb2>
 8000de6:	2b16      	cmp	r3, #22
 8000de8:	d101      	bne.n	8000dee <__sflush_r+0xb6>
 8000dea:	602f      	str	r7, [r5, #0]
 8000dec:	e7b1      	b.n	8000d52 <__sflush_r+0x1a>
 8000dee:	89a3      	ldrh	r3, [r4, #12]
 8000df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df4:	81a3      	strh	r3, [r4, #12]
 8000df6:	e7ad      	b.n	8000d54 <__sflush_r+0x1c>
 8000df8:	690f      	ldr	r7, [r1, #16]
 8000dfa:	2f00      	cmp	r7, #0
 8000dfc:	d0a9      	beq.n	8000d52 <__sflush_r+0x1a>
 8000dfe:	0793      	lsls	r3, r2, #30
 8000e00:	680e      	ldr	r6, [r1, #0]
 8000e02:	bf08      	it	eq
 8000e04:	694b      	ldreq	r3, [r1, #20]
 8000e06:	600f      	str	r7, [r1, #0]
 8000e08:	bf18      	it	ne
 8000e0a:	2300      	movne	r3, #0
 8000e0c:	eba6 0807 	sub.w	r8, r6, r7
 8000e10:	608b      	str	r3, [r1, #8]
 8000e12:	f1b8 0f00 	cmp.w	r8, #0
 8000e16:	dd9c      	ble.n	8000d52 <__sflush_r+0x1a>
 8000e18:	4643      	mov	r3, r8
 8000e1a:	463a      	mov	r2, r7
 8000e1c:	6a21      	ldr	r1, [r4, #32]
 8000e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e20:	4628      	mov	r0, r5
 8000e22:	47b0      	blx	r6
 8000e24:	2800      	cmp	r0, #0
 8000e26:	dc06      	bgt.n	8000e36 <__sflush_r+0xfe>
 8000e28:	89a3      	ldrh	r3, [r4, #12]
 8000e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e2e:	81a3      	strh	r3, [r4, #12]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	e78e      	b.n	8000d54 <__sflush_r+0x1c>
 8000e36:	4407      	add	r7, r0
 8000e38:	eba8 0800 	sub.w	r8, r8, r0
 8000e3c:	e7e9      	b.n	8000e12 <__sflush_r+0xda>
 8000e3e:	bf00      	nop
 8000e40:	20400001 	.word	0x20400001

08000e44 <_fflush_r>:
 8000e44:	b538      	push	{r3, r4, r5, lr}
 8000e46:	690b      	ldr	r3, [r1, #16]
 8000e48:	4605      	mov	r5, r0
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	b1db      	cbz	r3, 8000e86 <_fflush_r+0x42>
 8000e4e:	b118      	cbz	r0, 8000e58 <_fflush_r+0x14>
 8000e50:	6983      	ldr	r3, [r0, #24]
 8000e52:	b90b      	cbnz	r3, 8000e58 <_fflush_r+0x14>
 8000e54:	f000 f860 	bl	8000f18 <__sinit>
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <_fflush_r+0x48>)
 8000e5a:	429c      	cmp	r4, r3
 8000e5c:	d109      	bne.n	8000e72 <_fflush_r+0x2e>
 8000e5e:	686c      	ldr	r4, [r5, #4]
 8000e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e64:	b17b      	cbz	r3, 8000e86 <_fflush_r+0x42>
 8000e66:	4621      	mov	r1, r4
 8000e68:	4628      	mov	r0, r5
 8000e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e6e:	f7ff bf63 	b.w	8000d38 <__sflush_r>
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <_fflush_r+0x4c>)
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d101      	bne.n	8000e7c <_fflush_r+0x38>
 8000e78:	68ac      	ldr	r4, [r5, #8]
 8000e7a:	e7f1      	b.n	8000e60 <_fflush_r+0x1c>
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <_fflush_r+0x50>)
 8000e7e:	429c      	cmp	r4, r3
 8000e80:	bf08      	it	eq
 8000e82:	68ec      	ldreq	r4, [r5, #12]
 8000e84:	e7ec      	b.n	8000e60 <_fflush_r+0x1c>
 8000e86:	2000      	movs	r0, #0
 8000e88:	bd38      	pop	{r3, r4, r5, pc}
 8000e8a:	bf00      	nop
 8000e8c:	080019fc 	.word	0x080019fc
 8000e90:	08001a1c 	.word	0x08001a1c
 8000e94:	080019dc 	.word	0x080019dc

08000e98 <std>:
 8000e98:	2300      	movs	r3, #0
 8000e9a:	b510      	push	{r4, lr}
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8000ea2:	6083      	str	r3, [r0, #8]
 8000ea4:	8181      	strh	r1, [r0, #12]
 8000ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8000ea8:	81c2      	strh	r2, [r0, #14]
 8000eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000eae:	6183      	str	r3, [r0, #24]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	305c      	adds	r0, #92	; 0x5c
 8000eb6:	f7ff fdfb 	bl	8000ab0 <memset>
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <std+0x38>)
 8000ebc:	6263      	str	r3, [r4, #36]	; 0x24
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <std+0x3c>)
 8000ec0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <std+0x40>)
 8000ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <std+0x44>)
 8000ec8:	6224      	str	r4, [r4, #32]
 8000eca:	6323      	str	r3, [r4, #48]	; 0x30
 8000ecc:	bd10      	pop	{r4, pc}
 8000ece:	bf00      	nop
 8000ed0:	080017f5 	.word	0x080017f5
 8000ed4:	08001817 	.word	0x08001817
 8000ed8:	0800184f 	.word	0x0800184f
 8000edc:	08001873 	.word	0x08001873

08000ee0 <_cleanup_r>:
 8000ee0:	4901      	ldr	r1, [pc, #4]	; (8000ee8 <_cleanup_r+0x8>)
 8000ee2:	f000 b885 	b.w	8000ff0 <_fwalk_reent>
 8000ee6:	bf00      	nop
 8000ee8:	08000e45 	.word	0x08000e45

08000eec <__sfmoreglue>:
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	1e4a      	subs	r2, r1, #1
 8000ef0:	2568      	movs	r5, #104	; 0x68
 8000ef2:	4355      	muls	r5, r2
 8000ef4:	460e      	mov	r6, r1
 8000ef6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000efa:	f000 f949 	bl	8001190 <_malloc_r>
 8000efe:	4604      	mov	r4, r0
 8000f00:	b140      	cbz	r0, 8000f14 <__sfmoreglue+0x28>
 8000f02:	2100      	movs	r1, #0
 8000f04:	e9c0 1600 	strd	r1, r6, [r0]
 8000f08:	300c      	adds	r0, #12
 8000f0a:	60a0      	str	r0, [r4, #8]
 8000f0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f10:	f7ff fdce 	bl	8000ab0 <memset>
 8000f14:	4620      	mov	r0, r4
 8000f16:	bd70      	pop	{r4, r5, r6, pc}

08000f18 <__sinit>:
 8000f18:	6983      	ldr	r3, [r0, #24]
 8000f1a:	b510      	push	{r4, lr}
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	bb33      	cbnz	r3, 8000f6e <__sinit+0x56>
 8000f20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000f24:	6503      	str	r3, [r0, #80]	; 0x50
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <__sinit+0x58>)
 8000f28:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <__sinit+0x5c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6282      	str	r2, [r0, #40]	; 0x28
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	bf04      	itt	eq
 8000f32:	2301      	moveq	r3, #1
 8000f34:	6183      	streq	r3, [r0, #24]
 8000f36:	f000 f81f 	bl	8000f78 <__sfp>
 8000f3a:	6060      	str	r0, [r4, #4]
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f000 f81b 	bl	8000f78 <__sfp>
 8000f42:	60a0      	str	r0, [r4, #8]
 8000f44:	4620      	mov	r0, r4
 8000f46:	f000 f817 	bl	8000f78 <__sfp>
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60e0      	str	r0, [r4, #12]
 8000f4e:	2104      	movs	r1, #4
 8000f50:	6860      	ldr	r0, [r4, #4]
 8000f52:	f7ff ffa1 	bl	8000e98 <std>
 8000f56:	2201      	movs	r2, #1
 8000f58:	2109      	movs	r1, #9
 8000f5a:	68a0      	ldr	r0, [r4, #8]
 8000f5c:	f7ff ff9c 	bl	8000e98 <std>
 8000f60:	2202      	movs	r2, #2
 8000f62:	2112      	movs	r1, #18
 8000f64:	68e0      	ldr	r0, [r4, #12]
 8000f66:	f7ff ff97 	bl	8000e98 <std>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	61a3      	str	r3, [r4, #24]
 8000f6e:	bd10      	pop	{r4, pc}
 8000f70:	080019d8 	.word	0x080019d8
 8000f74:	08000ee1 	.word	0x08000ee1

08000f78 <__sfp>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <__sfp+0x70>)
 8000f7c:	681e      	ldr	r6, [r3, #0]
 8000f7e:	69b3      	ldr	r3, [r6, #24]
 8000f80:	4607      	mov	r7, r0
 8000f82:	b913      	cbnz	r3, 8000f8a <__sfp+0x12>
 8000f84:	4630      	mov	r0, r6
 8000f86:	f7ff ffc7 	bl	8000f18 <__sinit>
 8000f8a:	3648      	adds	r6, #72	; 0x48
 8000f8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	d503      	bpl.n	8000f9c <__sfp+0x24>
 8000f94:	6833      	ldr	r3, [r6, #0]
 8000f96:	b133      	cbz	r3, 8000fa6 <__sfp+0x2e>
 8000f98:	6836      	ldr	r6, [r6, #0]
 8000f9a:	e7f7      	b.n	8000f8c <__sfp+0x14>
 8000f9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000fa0:	b16d      	cbz	r5, 8000fbe <__sfp+0x46>
 8000fa2:	3468      	adds	r4, #104	; 0x68
 8000fa4:	e7f4      	b.n	8000f90 <__sfp+0x18>
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	4638      	mov	r0, r7
 8000faa:	f7ff ff9f 	bl	8000eec <__sfmoreglue>
 8000fae:	6030      	str	r0, [r6, #0]
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	d1f1      	bne.n	8000f98 <__sfp+0x20>
 8000fb4:	230c      	movs	r3, #12
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	4604      	mov	r4, r0
 8000fba:	4620      	mov	r0, r4
 8000fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <__sfp+0x74>)
 8000fc0:	6665      	str	r5, [r4, #100]	; 0x64
 8000fc2:	e9c4 5500 	strd	r5, r5, [r4]
 8000fc6:	60a5      	str	r5, [r4, #8]
 8000fc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000fcc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000fd0:	2208      	movs	r2, #8
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000fd8:	f7ff fd6a 	bl	8000ab0 <memset>
 8000fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000fe4:	e7e9      	b.n	8000fba <__sfp+0x42>
 8000fe6:	bf00      	nop
 8000fe8:	080019d8 	.word	0x080019d8
 8000fec:	ffff0001 	.word	0xffff0001

08000ff0 <_fwalk_reent>:
 8000ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ff4:	4680      	mov	r8, r0
 8000ff6:	4689      	mov	r9, r1
 8000ff8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	b914      	cbnz	r4, 8001006 <_fwalk_reent+0x16>
 8001000:	4630      	mov	r0, r6
 8001002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001006:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800100a:	3f01      	subs	r7, #1
 800100c:	d501      	bpl.n	8001012 <_fwalk_reent+0x22>
 800100e:	6824      	ldr	r4, [r4, #0]
 8001010:	e7f5      	b.n	8000ffe <_fwalk_reent+0xe>
 8001012:	89ab      	ldrh	r3, [r5, #12]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d907      	bls.n	8001028 <_fwalk_reent+0x38>
 8001018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800101c:	3301      	adds	r3, #1
 800101e:	d003      	beq.n	8001028 <_fwalk_reent+0x38>
 8001020:	4629      	mov	r1, r5
 8001022:	4640      	mov	r0, r8
 8001024:	47c8      	blx	r9
 8001026:	4306      	orrs	r6, r0
 8001028:	3568      	adds	r5, #104	; 0x68
 800102a:	e7ee      	b.n	800100a <_fwalk_reent+0x1a>

0800102c <__swhatbuf_r>:
 800102c:	b570      	push	{r4, r5, r6, lr}
 800102e:	460e      	mov	r6, r1
 8001030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001034:	2900      	cmp	r1, #0
 8001036:	b096      	sub	sp, #88	; 0x58
 8001038:	4614      	mov	r4, r2
 800103a:	461d      	mov	r5, r3
 800103c:	da07      	bge.n	800104e <__swhatbuf_r+0x22>
 800103e:	2300      	movs	r3, #0
 8001040:	602b      	str	r3, [r5, #0]
 8001042:	89b3      	ldrh	r3, [r6, #12]
 8001044:	061a      	lsls	r2, r3, #24
 8001046:	d410      	bmi.n	800106a <__swhatbuf_r+0x3e>
 8001048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104c:	e00e      	b.n	800106c <__swhatbuf_r+0x40>
 800104e:	466a      	mov	r2, sp
 8001050:	f000 fc36 	bl	80018c0 <_fstat_r>
 8001054:	2800      	cmp	r0, #0
 8001056:	dbf2      	blt.n	800103e <__swhatbuf_r+0x12>
 8001058:	9a01      	ldr	r2, [sp, #4]
 800105a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800105e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001062:	425a      	negs	r2, r3
 8001064:	415a      	adcs	r2, r3
 8001066:	602a      	str	r2, [r5, #0]
 8001068:	e7ee      	b.n	8001048 <__swhatbuf_r+0x1c>
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	2000      	movs	r0, #0
 800106e:	6023      	str	r3, [r4, #0]
 8001070:	b016      	add	sp, #88	; 0x58
 8001072:	bd70      	pop	{r4, r5, r6, pc}

08001074 <__smakebuf_r>:
 8001074:	898b      	ldrh	r3, [r1, #12]
 8001076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001078:	079d      	lsls	r5, r3, #30
 800107a:	4606      	mov	r6, r0
 800107c:	460c      	mov	r4, r1
 800107e:	d507      	bpl.n	8001090 <__smakebuf_r+0x1c>
 8001080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001084:	6023      	str	r3, [r4, #0]
 8001086:	6123      	str	r3, [r4, #16]
 8001088:	2301      	movs	r3, #1
 800108a:	6163      	str	r3, [r4, #20]
 800108c:	b002      	add	sp, #8
 800108e:	bd70      	pop	{r4, r5, r6, pc}
 8001090:	ab01      	add	r3, sp, #4
 8001092:	466a      	mov	r2, sp
 8001094:	f7ff ffca 	bl	800102c <__swhatbuf_r>
 8001098:	9900      	ldr	r1, [sp, #0]
 800109a:	4605      	mov	r5, r0
 800109c:	4630      	mov	r0, r6
 800109e:	f000 f877 	bl	8001190 <_malloc_r>
 80010a2:	b948      	cbnz	r0, 80010b8 <__smakebuf_r+0x44>
 80010a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010a8:	059a      	lsls	r2, r3, #22
 80010aa:	d4ef      	bmi.n	800108c <__smakebuf_r+0x18>
 80010ac:	f023 0303 	bic.w	r3, r3, #3
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	81a3      	strh	r3, [r4, #12]
 80010b6:	e7e3      	b.n	8001080 <__smakebuf_r+0xc>
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <__smakebuf_r+0x7c>)
 80010ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80010bc:	89a3      	ldrh	r3, [r4, #12]
 80010be:	6020      	str	r0, [r4, #0]
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	81a3      	strh	r3, [r4, #12]
 80010c6:	9b00      	ldr	r3, [sp, #0]
 80010c8:	6163      	str	r3, [r4, #20]
 80010ca:	9b01      	ldr	r3, [sp, #4]
 80010cc:	6120      	str	r0, [r4, #16]
 80010ce:	b15b      	cbz	r3, 80010e8 <__smakebuf_r+0x74>
 80010d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010d4:	4630      	mov	r0, r6
 80010d6:	f000 fc05 	bl	80018e4 <_isatty_r>
 80010da:	b128      	cbz	r0, 80010e8 <__smakebuf_r+0x74>
 80010dc:	89a3      	ldrh	r3, [r4, #12]
 80010de:	f023 0303 	bic.w	r3, r3, #3
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	81a3      	strh	r3, [r4, #12]
 80010e8:	89a3      	ldrh	r3, [r4, #12]
 80010ea:	431d      	orrs	r5, r3
 80010ec:	81a5      	strh	r5, [r4, #12]
 80010ee:	e7cd      	b.n	800108c <__smakebuf_r+0x18>
 80010f0:	08000ee1 	.word	0x08000ee1

080010f4 <_free_r>:
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4605      	mov	r5, r0
 80010f8:	2900      	cmp	r1, #0
 80010fa:	d045      	beq.n	8001188 <_free_r+0x94>
 80010fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001100:	1f0c      	subs	r4, r1, #4
 8001102:	2b00      	cmp	r3, #0
 8001104:	bfb8      	it	lt
 8001106:	18e4      	addlt	r4, r4, r3
 8001108:	f000 fc0e 	bl	8001928 <__malloc_lock>
 800110c:	4a1f      	ldr	r2, [pc, #124]	; (800118c <_free_r+0x98>)
 800110e:	6813      	ldr	r3, [r2, #0]
 8001110:	4610      	mov	r0, r2
 8001112:	b933      	cbnz	r3, 8001122 <_free_r+0x2e>
 8001114:	6063      	str	r3, [r4, #4]
 8001116:	6014      	str	r4, [r2, #0]
 8001118:	4628      	mov	r0, r5
 800111a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800111e:	f000 bc04 	b.w	800192a <__malloc_unlock>
 8001122:	42a3      	cmp	r3, r4
 8001124:	d90c      	bls.n	8001140 <_free_r+0x4c>
 8001126:	6821      	ldr	r1, [r4, #0]
 8001128:	1862      	adds	r2, r4, r1
 800112a:	4293      	cmp	r3, r2
 800112c:	bf04      	itt	eq
 800112e:	681a      	ldreq	r2, [r3, #0]
 8001130:	685b      	ldreq	r3, [r3, #4]
 8001132:	6063      	str	r3, [r4, #4]
 8001134:	bf04      	itt	eq
 8001136:	1852      	addeq	r2, r2, r1
 8001138:	6022      	streq	r2, [r4, #0]
 800113a:	6004      	str	r4, [r0, #0]
 800113c:	e7ec      	b.n	8001118 <_free_r+0x24>
 800113e:	4613      	mov	r3, r2
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	b10a      	cbz	r2, 8001148 <_free_r+0x54>
 8001144:	42a2      	cmp	r2, r4
 8001146:	d9fa      	bls.n	800113e <_free_r+0x4a>
 8001148:	6819      	ldr	r1, [r3, #0]
 800114a:	1858      	adds	r0, r3, r1
 800114c:	42a0      	cmp	r0, r4
 800114e:	d10b      	bne.n	8001168 <_free_r+0x74>
 8001150:	6820      	ldr	r0, [r4, #0]
 8001152:	4401      	add	r1, r0
 8001154:	1858      	adds	r0, r3, r1
 8001156:	4282      	cmp	r2, r0
 8001158:	6019      	str	r1, [r3, #0]
 800115a:	d1dd      	bne.n	8001118 <_free_r+0x24>
 800115c:	6810      	ldr	r0, [r2, #0]
 800115e:	6852      	ldr	r2, [r2, #4]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	4401      	add	r1, r0
 8001164:	6019      	str	r1, [r3, #0]
 8001166:	e7d7      	b.n	8001118 <_free_r+0x24>
 8001168:	d902      	bls.n	8001170 <_free_r+0x7c>
 800116a:	230c      	movs	r3, #12
 800116c:	602b      	str	r3, [r5, #0]
 800116e:	e7d3      	b.n	8001118 <_free_r+0x24>
 8001170:	6820      	ldr	r0, [r4, #0]
 8001172:	1821      	adds	r1, r4, r0
 8001174:	428a      	cmp	r2, r1
 8001176:	bf04      	itt	eq
 8001178:	6811      	ldreq	r1, [r2, #0]
 800117a:	6852      	ldreq	r2, [r2, #4]
 800117c:	6062      	str	r2, [r4, #4]
 800117e:	bf04      	itt	eq
 8001180:	1809      	addeq	r1, r1, r0
 8001182:	6021      	streq	r1, [r4, #0]
 8001184:	605c      	str	r4, [r3, #4]
 8001186:	e7c7      	b.n	8001118 <_free_r+0x24>
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop
 800118c:	2000008c 	.word	0x2000008c

08001190 <_malloc_r>:
 8001190:	b570      	push	{r4, r5, r6, lr}
 8001192:	1ccd      	adds	r5, r1, #3
 8001194:	f025 0503 	bic.w	r5, r5, #3
 8001198:	3508      	adds	r5, #8
 800119a:	2d0c      	cmp	r5, #12
 800119c:	bf38      	it	cc
 800119e:	250c      	movcc	r5, #12
 80011a0:	2d00      	cmp	r5, #0
 80011a2:	4606      	mov	r6, r0
 80011a4:	db01      	blt.n	80011aa <_malloc_r+0x1a>
 80011a6:	42a9      	cmp	r1, r5
 80011a8:	d903      	bls.n	80011b2 <_malloc_r+0x22>
 80011aa:	230c      	movs	r3, #12
 80011ac:	6033      	str	r3, [r6, #0]
 80011ae:	2000      	movs	r0, #0
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
 80011b2:	f000 fbb9 	bl	8001928 <__malloc_lock>
 80011b6:	4a21      	ldr	r2, [pc, #132]	; (800123c <_malloc_r+0xac>)
 80011b8:	6814      	ldr	r4, [r2, #0]
 80011ba:	4621      	mov	r1, r4
 80011bc:	b991      	cbnz	r1, 80011e4 <_malloc_r+0x54>
 80011be:	4c20      	ldr	r4, [pc, #128]	; (8001240 <_malloc_r+0xb0>)
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	b91b      	cbnz	r3, 80011cc <_malloc_r+0x3c>
 80011c4:	4630      	mov	r0, r6
 80011c6:	f000 fb05 	bl	80017d4 <_sbrk_r>
 80011ca:	6020      	str	r0, [r4, #0]
 80011cc:	4629      	mov	r1, r5
 80011ce:	4630      	mov	r0, r6
 80011d0:	f000 fb00 	bl	80017d4 <_sbrk_r>
 80011d4:	1c43      	adds	r3, r0, #1
 80011d6:	d124      	bne.n	8001222 <_malloc_r+0x92>
 80011d8:	230c      	movs	r3, #12
 80011da:	6033      	str	r3, [r6, #0]
 80011dc:	4630      	mov	r0, r6
 80011de:	f000 fba4 	bl	800192a <__malloc_unlock>
 80011e2:	e7e4      	b.n	80011ae <_malloc_r+0x1e>
 80011e4:	680b      	ldr	r3, [r1, #0]
 80011e6:	1b5b      	subs	r3, r3, r5
 80011e8:	d418      	bmi.n	800121c <_malloc_r+0x8c>
 80011ea:	2b0b      	cmp	r3, #11
 80011ec:	d90f      	bls.n	800120e <_malloc_r+0x7e>
 80011ee:	600b      	str	r3, [r1, #0]
 80011f0:	50cd      	str	r5, [r1, r3]
 80011f2:	18cc      	adds	r4, r1, r3
 80011f4:	4630      	mov	r0, r6
 80011f6:	f000 fb98 	bl	800192a <__malloc_unlock>
 80011fa:	f104 000b 	add.w	r0, r4, #11
 80011fe:	1d23      	adds	r3, r4, #4
 8001200:	f020 0007 	bic.w	r0, r0, #7
 8001204:	1ac3      	subs	r3, r0, r3
 8001206:	d0d3      	beq.n	80011b0 <_malloc_r+0x20>
 8001208:	425a      	negs	r2, r3
 800120a:	50e2      	str	r2, [r4, r3]
 800120c:	e7d0      	b.n	80011b0 <_malloc_r+0x20>
 800120e:	428c      	cmp	r4, r1
 8001210:	684b      	ldr	r3, [r1, #4]
 8001212:	bf16      	itet	ne
 8001214:	6063      	strne	r3, [r4, #4]
 8001216:	6013      	streq	r3, [r2, #0]
 8001218:	460c      	movne	r4, r1
 800121a:	e7eb      	b.n	80011f4 <_malloc_r+0x64>
 800121c:	460c      	mov	r4, r1
 800121e:	6849      	ldr	r1, [r1, #4]
 8001220:	e7cc      	b.n	80011bc <_malloc_r+0x2c>
 8001222:	1cc4      	adds	r4, r0, #3
 8001224:	f024 0403 	bic.w	r4, r4, #3
 8001228:	42a0      	cmp	r0, r4
 800122a:	d005      	beq.n	8001238 <_malloc_r+0xa8>
 800122c:	1a21      	subs	r1, r4, r0
 800122e:	4630      	mov	r0, r6
 8001230:	f000 fad0 	bl	80017d4 <_sbrk_r>
 8001234:	3001      	adds	r0, #1
 8001236:	d0cf      	beq.n	80011d8 <_malloc_r+0x48>
 8001238:	6025      	str	r5, [r4, #0]
 800123a:	e7db      	b.n	80011f4 <_malloc_r+0x64>
 800123c:	2000008c 	.word	0x2000008c
 8001240:	20000090 	.word	0x20000090

08001244 <__sfputc_r>:
 8001244:	6893      	ldr	r3, [r2, #8]
 8001246:	3b01      	subs	r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	b410      	push	{r4}
 800124c:	6093      	str	r3, [r2, #8]
 800124e:	da08      	bge.n	8001262 <__sfputc_r+0x1e>
 8001250:	6994      	ldr	r4, [r2, #24]
 8001252:	42a3      	cmp	r3, r4
 8001254:	db01      	blt.n	800125a <__sfputc_r+0x16>
 8001256:	290a      	cmp	r1, #10
 8001258:	d103      	bne.n	8001262 <__sfputc_r+0x1e>
 800125a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800125e:	f7ff bcab 	b.w	8000bb8 <__swbuf_r>
 8001262:	6813      	ldr	r3, [r2, #0]
 8001264:	1c58      	adds	r0, r3, #1
 8001266:	6010      	str	r0, [r2, #0]
 8001268:	7019      	strb	r1, [r3, #0]
 800126a:	4608      	mov	r0, r1
 800126c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001270:	4770      	bx	lr

08001272 <__sfputs_r>:
 8001272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001274:	4606      	mov	r6, r0
 8001276:	460f      	mov	r7, r1
 8001278:	4614      	mov	r4, r2
 800127a:	18d5      	adds	r5, r2, r3
 800127c:	42ac      	cmp	r4, r5
 800127e:	d101      	bne.n	8001284 <__sfputs_r+0x12>
 8001280:	2000      	movs	r0, #0
 8001282:	e007      	b.n	8001294 <__sfputs_r+0x22>
 8001284:	463a      	mov	r2, r7
 8001286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800128a:	4630      	mov	r0, r6
 800128c:	f7ff ffda 	bl	8001244 <__sfputc_r>
 8001290:	1c43      	adds	r3, r0, #1
 8001292:	d1f3      	bne.n	800127c <__sfputs_r+0xa>
 8001294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001298 <_vfiprintf_r>:
 8001298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800129c:	460c      	mov	r4, r1
 800129e:	b09d      	sub	sp, #116	; 0x74
 80012a0:	4617      	mov	r7, r2
 80012a2:	461d      	mov	r5, r3
 80012a4:	4606      	mov	r6, r0
 80012a6:	b118      	cbz	r0, 80012b0 <_vfiprintf_r+0x18>
 80012a8:	6983      	ldr	r3, [r0, #24]
 80012aa:	b90b      	cbnz	r3, 80012b0 <_vfiprintf_r+0x18>
 80012ac:	f7ff fe34 	bl	8000f18 <__sinit>
 80012b0:	4b7c      	ldr	r3, [pc, #496]	; (80014a4 <_vfiprintf_r+0x20c>)
 80012b2:	429c      	cmp	r4, r3
 80012b4:	d158      	bne.n	8001368 <_vfiprintf_r+0xd0>
 80012b6:	6874      	ldr	r4, [r6, #4]
 80012b8:	89a3      	ldrh	r3, [r4, #12]
 80012ba:	0718      	lsls	r0, r3, #28
 80012bc:	d55e      	bpl.n	800137c <_vfiprintf_r+0xe4>
 80012be:	6923      	ldr	r3, [r4, #16]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d05b      	beq.n	800137c <_vfiprintf_r+0xe4>
 80012c4:	2300      	movs	r3, #0
 80012c6:	9309      	str	r3, [sp, #36]	; 0x24
 80012c8:	2320      	movs	r3, #32
 80012ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012ce:	2330      	movs	r3, #48	; 0x30
 80012d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012d4:	9503      	str	r5, [sp, #12]
 80012d6:	f04f 0b01 	mov.w	fp, #1
 80012da:	46b8      	mov	r8, r7
 80012dc:	4645      	mov	r5, r8
 80012de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80012e2:	b10b      	cbz	r3, 80012e8 <_vfiprintf_r+0x50>
 80012e4:	2b25      	cmp	r3, #37	; 0x25
 80012e6:	d154      	bne.n	8001392 <_vfiprintf_r+0xfa>
 80012e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80012ec:	d00b      	beq.n	8001306 <_vfiprintf_r+0x6e>
 80012ee:	4653      	mov	r3, sl
 80012f0:	463a      	mov	r2, r7
 80012f2:	4621      	mov	r1, r4
 80012f4:	4630      	mov	r0, r6
 80012f6:	f7ff ffbc 	bl	8001272 <__sfputs_r>
 80012fa:	3001      	adds	r0, #1
 80012fc:	f000 80c2 	beq.w	8001484 <_vfiprintf_r+0x1ec>
 8001300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001302:	4453      	add	r3, sl
 8001304:	9309      	str	r3, [sp, #36]	; 0x24
 8001306:	f898 3000 	ldrb.w	r3, [r8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80ba 	beq.w	8001484 <_vfiprintf_r+0x1ec>
 8001310:	2300      	movs	r3, #0
 8001312:	f04f 32ff 	mov.w	r2, #4294967295
 8001316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800131a:	9304      	str	r3, [sp, #16]
 800131c:	9307      	str	r3, [sp, #28]
 800131e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001322:	931a      	str	r3, [sp, #104]	; 0x68
 8001324:	46a8      	mov	r8, r5
 8001326:	2205      	movs	r2, #5
 8001328:	f818 1b01 	ldrb.w	r1, [r8], #1
 800132c:	485e      	ldr	r0, [pc, #376]	; (80014a8 <_vfiprintf_r+0x210>)
 800132e:	f7fe ff5f 	bl	80001f0 <memchr>
 8001332:	9b04      	ldr	r3, [sp, #16]
 8001334:	bb78      	cbnz	r0, 8001396 <_vfiprintf_r+0xfe>
 8001336:	06d9      	lsls	r1, r3, #27
 8001338:	bf44      	itt	mi
 800133a:	2220      	movmi	r2, #32
 800133c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001340:	071a      	lsls	r2, r3, #28
 8001342:	bf44      	itt	mi
 8001344:	222b      	movmi	r2, #43	; 0x2b
 8001346:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800134a:	782a      	ldrb	r2, [r5, #0]
 800134c:	2a2a      	cmp	r2, #42	; 0x2a
 800134e:	d02a      	beq.n	80013a6 <_vfiprintf_r+0x10e>
 8001350:	9a07      	ldr	r2, [sp, #28]
 8001352:	46a8      	mov	r8, r5
 8001354:	2000      	movs	r0, #0
 8001356:	250a      	movs	r5, #10
 8001358:	4641      	mov	r1, r8
 800135a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800135e:	3b30      	subs	r3, #48	; 0x30
 8001360:	2b09      	cmp	r3, #9
 8001362:	d969      	bls.n	8001438 <_vfiprintf_r+0x1a0>
 8001364:	b360      	cbz	r0, 80013c0 <_vfiprintf_r+0x128>
 8001366:	e024      	b.n	80013b2 <_vfiprintf_r+0x11a>
 8001368:	4b50      	ldr	r3, [pc, #320]	; (80014ac <_vfiprintf_r+0x214>)
 800136a:	429c      	cmp	r4, r3
 800136c:	d101      	bne.n	8001372 <_vfiprintf_r+0xda>
 800136e:	68b4      	ldr	r4, [r6, #8]
 8001370:	e7a2      	b.n	80012b8 <_vfiprintf_r+0x20>
 8001372:	4b4f      	ldr	r3, [pc, #316]	; (80014b0 <_vfiprintf_r+0x218>)
 8001374:	429c      	cmp	r4, r3
 8001376:	bf08      	it	eq
 8001378:	68f4      	ldreq	r4, [r6, #12]
 800137a:	e79d      	b.n	80012b8 <_vfiprintf_r+0x20>
 800137c:	4621      	mov	r1, r4
 800137e:	4630      	mov	r0, r6
 8001380:	f7ff fc6c 	bl	8000c5c <__swsetup_r>
 8001384:	2800      	cmp	r0, #0
 8001386:	d09d      	beq.n	80012c4 <_vfiprintf_r+0x2c>
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	b01d      	add	sp, #116	; 0x74
 800138e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001392:	46a8      	mov	r8, r5
 8001394:	e7a2      	b.n	80012dc <_vfiprintf_r+0x44>
 8001396:	4a44      	ldr	r2, [pc, #272]	; (80014a8 <_vfiprintf_r+0x210>)
 8001398:	1a80      	subs	r0, r0, r2
 800139a:	fa0b f000 	lsl.w	r0, fp, r0
 800139e:	4318      	orrs	r0, r3
 80013a0:	9004      	str	r0, [sp, #16]
 80013a2:	4645      	mov	r5, r8
 80013a4:	e7be      	b.n	8001324 <_vfiprintf_r+0x8c>
 80013a6:	9a03      	ldr	r2, [sp, #12]
 80013a8:	1d11      	adds	r1, r2, #4
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	9103      	str	r1, [sp, #12]
 80013ae:	2a00      	cmp	r2, #0
 80013b0:	db01      	blt.n	80013b6 <_vfiprintf_r+0x11e>
 80013b2:	9207      	str	r2, [sp, #28]
 80013b4:	e004      	b.n	80013c0 <_vfiprintf_r+0x128>
 80013b6:	4252      	negs	r2, r2
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	9207      	str	r2, [sp, #28]
 80013be:	9304      	str	r3, [sp, #16]
 80013c0:	f898 3000 	ldrb.w	r3, [r8]
 80013c4:	2b2e      	cmp	r3, #46	; 0x2e
 80013c6:	d10e      	bne.n	80013e6 <_vfiprintf_r+0x14e>
 80013c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80013cc:	2b2a      	cmp	r3, #42	; 0x2a
 80013ce:	d138      	bne.n	8001442 <_vfiprintf_r+0x1aa>
 80013d0:	9b03      	ldr	r3, [sp, #12]
 80013d2:	1d1a      	adds	r2, r3, #4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	9203      	str	r2, [sp, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bfb8      	it	lt
 80013dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80013e0:	f108 0802 	add.w	r8, r8, #2
 80013e4:	9305      	str	r3, [sp, #20]
 80013e6:	4d33      	ldr	r5, [pc, #204]	; (80014b4 <_vfiprintf_r+0x21c>)
 80013e8:	f898 1000 	ldrb.w	r1, [r8]
 80013ec:	2203      	movs	r2, #3
 80013ee:	4628      	mov	r0, r5
 80013f0:	f7fe fefe 	bl	80001f0 <memchr>
 80013f4:	b140      	cbz	r0, 8001408 <_vfiprintf_r+0x170>
 80013f6:	2340      	movs	r3, #64	; 0x40
 80013f8:	1b40      	subs	r0, r0, r5
 80013fa:	fa03 f000 	lsl.w	r0, r3, r0
 80013fe:	9b04      	ldr	r3, [sp, #16]
 8001400:	4303      	orrs	r3, r0
 8001402:	f108 0801 	add.w	r8, r8, #1
 8001406:	9304      	str	r3, [sp, #16]
 8001408:	f898 1000 	ldrb.w	r1, [r8]
 800140c:	482a      	ldr	r0, [pc, #168]	; (80014b8 <_vfiprintf_r+0x220>)
 800140e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001412:	2206      	movs	r2, #6
 8001414:	f108 0701 	add.w	r7, r8, #1
 8001418:	f7fe feea 	bl	80001f0 <memchr>
 800141c:	2800      	cmp	r0, #0
 800141e:	d037      	beq.n	8001490 <_vfiprintf_r+0x1f8>
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <_vfiprintf_r+0x224>)
 8001422:	bb1b      	cbnz	r3, 800146c <_vfiprintf_r+0x1d4>
 8001424:	9b03      	ldr	r3, [sp, #12]
 8001426:	3307      	adds	r3, #7
 8001428:	f023 0307 	bic.w	r3, r3, #7
 800142c:	3308      	adds	r3, #8
 800142e:	9303      	str	r3, [sp, #12]
 8001430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001432:	444b      	add	r3, r9
 8001434:	9309      	str	r3, [sp, #36]	; 0x24
 8001436:	e750      	b.n	80012da <_vfiprintf_r+0x42>
 8001438:	fb05 3202 	mla	r2, r5, r2, r3
 800143c:	2001      	movs	r0, #1
 800143e:	4688      	mov	r8, r1
 8001440:	e78a      	b.n	8001358 <_vfiprintf_r+0xc0>
 8001442:	2300      	movs	r3, #0
 8001444:	f108 0801 	add.w	r8, r8, #1
 8001448:	9305      	str	r3, [sp, #20]
 800144a:	4619      	mov	r1, r3
 800144c:	250a      	movs	r5, #10
 800144e:	4640      	mov	r0, r8
 8001450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001454:	3a30      	subs	r2, #48	; 0x30
 8001456:	2a09      	cmp	r2, #9
 8001458:	d903      	bls.n	8001462 <_vfiprintf_r+0x1ca>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0c3      	beq.n	80013e6 <_vfiprintf_r+0x14e>
 800145e:	9105      	str	r1, [sp, #20]
 8001460:	e7c1      	b.n	80013e6 <_vfiprintf_r+0x14e>
 8001462:	fb05 2101 	mla	r1, r5, r1, r2
 8001466:	2301      	movs	r3, #1
 8001468:	4680      	mov	r8, r0
 800146a:	e7f0      	b.n	800144e <_vfiprintf_r+0x1b6>
 800146c:	ab03      	add	r3, sp, #12
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	4622      	mov	r2, r4
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <_vfiprintf_r+0x228>)
 8001474:	a904      	add	r1, sp, #16
 8001476:	4630      	mov	r0, r6
 8001478:	f3af 8000 	nop.w
 800147c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001480:	4681      	mov	r9, r0
 8001482:	d1d5      	bne.n	8001430 <_vfiprintf_r+0x198>
 8001484:	89a3      	ldrh	r3, [r4, #12]
 8001486:	065b      	lsls	r3, r3, #25
 8001488:	f53f af7e 	bmi.w	8001388 <_vfiprintf_r+0xf0>
 800148c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800148e:	e77d      	b.n	800138c <_vfiprintf_r+0xf4>
 8001490:	ab03      	add	r3, sp, #12
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	4622      	mov	r2, r4
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <_vfiprintf_r+0x228>)
 8001498:	a904      	add	r1, sp, #16
 800149a:	4630      	mov	r0, r6
 800149c:	f000 f888 	bl	80015b0 <_printf_i>
 80014a0:	e7ec      	b.n	800147c <_vfiprintf_r+0x1e4>
 80014a2:	bf00      	nop
 80014a4:	080019fc 	.word	0x080019fc
 80014a8:	08001a3c 	.word	0x08001a3c
 80014ac:	08001a1c 	.word	0x08001a1c
 80014b0:	080019dc 	.word	0x080019dc
 80014b4:	08001a42 	.word	0x08001a42
 80014b8:	08001a46 	.word	0x08001a46
 80014bc:	00000000 	.word	0x00000000
 80014c0:	08001273 	.word	0x08001273

080014c4 <_printf_common>:
 80014c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c8:	4691      	mov	r9, r2
 80014ca:	461f      	mov	r7, r3
 80014cc:	688a      	ldr	r2, [r1, #8]
 80014ce:	690b      	ldr	r3, [r1, #16]
 80014d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80014d4:	4293      	cmp	r3, r2
 80014d6:	bfb8      	it	lt
 80014d8:	4613      	movlt	r3, r2
 80014da:	f8c9 3000 	str.w	r3, [r9]
 80014de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80014e2:	4606      	mov	r6, r0
 80014e4:	460c      	mov	r4, r1
 80014e6:	b112      	cbz	r2, 80014ee <_printf_common+0x2a>
 80014e8:	3301      	adds	r3, #1
 80014ea:	f8c9 3000 	str.w	r3, [r9]
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	0699      	lsls	r1, r3, #26
 80014f2:	bf42      	ittt	mi
 80014f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80014f8:	3302      	addmi	r3, #2
 80014fa:	f8c9 3000 	strmi.w	r3, [r9]
 80014fe:	6825      	ldr	r5, [r4, #0]
 8001500:	f015 0506 	ands.w	r5, r5, #6
 8001504:	d107      	bne.n	8001516 <_printf_common+0x52>
 8001506:	f104 0a19 	add.w	sl, r4, #25
 800150a:	68e3      	ldr	r3, [r4, #12]
 800150c:	f8d9 2000 	ldr.w	r2, [r9]
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	42ab      	cmp	r3, r5
 8001514:	dc28      	bgt.n	8001568 <_printf_common+0xa4>
 8001516:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800151a:	6822      	ldr	r2, [r4, #0]
 800151c:	3300      	adds	r3, #0
 800151e:	bf18      	it	ne
 8001520:	2301      	movne	r3, #1
 8001522:	0692      	lsls	r2, r2, #26
 8001524:	d42d      	bmi.n	8001582 <_printf_common+0xbe>
 8001526:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800152a:	4639      	mov	r1, r7
 800152c:	4630      	mov	r0, r6
 800152e:	47c0      	blx	r8
 8001530:	3001      	adds	r0, #1
 8001532:	d020      	beq.n	8001576 <_printf_common+0xb2>
 8001534:	6823      	ldr	r3, [r4, #0]
 8001536:	68e5      	ldr	r5, [r4, #12]
 8001538:	f8d9 2000 	ldr.w	r2, [r9]
 800153c:	f003 0306 	and.w	r3, r3, #6
 8001540:	2b04      	cmp	r3, #4
 8001542:	bf08      	it	eq
 8001544:	1aad      	subeq	r5, r5, r2
 8001546:	68a3      	ldr	r3, [r4, #8]
 8001548:	6922      	ldr	r2, [r4, #16]
 800154a:	bf0c      	ite	eq
 800154c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001550:	2500      	movne	r5, #0
 8001552:	4293      	cmp	r3, r2
 8001554:	bfc4      	itt	gt
 8001556:	1a9b      	subgt	r3, r3, r2
 8001558:	18ed      	addgt	r5, r5, r3
 800155a:	f04f 0900 	mov.w	r9, #0
 800155e:	341a      	adds	r4, #26
 8001560:	454d      	cmp	r5, r9
 8001562:	d11a      	bne.n	800159a <_printf_common+0xd6>
 8001564:	2000      	movs	r0, #0
 8001566:	e008      	b.n	800157a <_printf_common+0xb6>
 8001568:	2301      	movs	r3, #1
 800156a:	4652      	mov	r2, sl
 800156c:	4639      	mov	r1, r7
 800156e:	4630      	mov	r0, r6
 8001570:	47c0      	blx	r8
 8001572:	3001      	adds	r0, #1
 8001574:	d103      	bne.n	800157e <_printf_common+0xba>
 8001576:	f04f 30ff 	mov.w	r0, #4294967295
 800157a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800157e:	3501      	adds	r5, #1
 8001580:	e7c3      	b.n	800150a <_printf_common+0x46>
 8001582:	18e1      	adds	r1, r4, r3
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	2030      	movs	r0, #48	; 0x30
 8001588:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800158c:	4422      	add	r2, r4
 800158e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001592:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001596:	3302      	adds	r3, #2
 8001598:	e7c5      	b.n	8001526 <_printf_common+0x62>
 800159a:	2301      	movs	r3, #1
 800159c:	4622      	mov	r2, r4
 800159e:	4639      	mov	r1, r7
 80015a0:	4630      	mov	r0, r6
 80015a2:	47c0      	blx	r8
 80015a4:	3001      	adds	r0, #1
 80015a6:	d0e6      	beq.n	8001576 <_printf_common+0xb2>
 80015a8:	f109 0901 	add.w	r9, r9, #1
 80015ac:	e7d8      	b.n	8001560 <_printf_common+0x9c>
	...

080015b0 <_printf_i>:
 80015b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80015b8:	460c      	mov	r4, r1
 80015ba:	7e09      	ldrb	r1, [r1, #24]
 80015bc:	b085      	sub	sp, #20
 80015be:	296e      	cmp	r1, #110	; 0x6e
 80015c0:	4617      	mov	r7, r2
 80015c2:	4606      	mov	r6, r0
 80015c4:	4698      	mov	r8, r3
 80015c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80015c8:	f000 80b3 	beq.w	8001732 <_printf_i+0x182>
 80015cc:	d822      	bhi.n	8001614 <_printf_i+0x64>
 80015ce:	2963      	cmp	r1, #99	; 0x63
 80015d0:	d036      	beq.n	8001640 <_printf_i+0x90>
 80015d2:	d80a      	bhi.n	80015ea <_printf_i+0x3a>
 80015d4:	2900      	cmp	r1, #0
 80015d6:	f000 80b9 	beq.w	800174c <_printf_i+0x19c>
 80015da:	2958      	cmp	r1, #88	; 0x58
 80015dc:	f000 8083 	beq.w	80016e6 <_printf_i+0x136>
 80015e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80015e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80015e8:	e032      	b.n	8001650 <_printf_i+0xa0>
 80015ea:	2964      	cmp	r1, #100	; 0x64
 80015ec:	d001      	beq.n	80015f2 <_printf_i+0x42>
 80015ee:	2969      	cmp	r1, #105	; 0x69
 80015f0:	d1f6      	bne.n	80015e0 <_printf_i+0x30>
 80015f2:	6820      	ldr	r0, [r4, #0]
 80015f4:	6813      	ldr	r3, [r2, #0]
 80015f6:	0605      	lsls	r5, r0, #24
 80015f8:	f103 0104 	add.w	r1, r3, #4
 80015fc:	d52a      	bpl.n	8001654 <_printf_i+0xa4>
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6011      	str	r1, [r2, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	da03      	bge.n	800160e <_printf_i+0x5e>
 8001606:	222d      	movs	r2, #45	; 0x2d
 8001608:	425b      	negs	r3, r3
 800160a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800160e:	486f      	ldr	r0, [pc, #444]	; (80017cc <_printf_i+0x21c>)
 8001610:	220a      	movs	r2, #10
 8001612:	e039      	b.n	8001688 <_printf_i+0xd8>
 8001614:	2973      	cmp	r1, #115	; 0x73
 8001616:	f000 809d 	beq.w	8001754 <_printf_i+0x1a4>
 800161a:	d808      	bhi.n	800162e <_printf_i+0x7e>
 800161c:	296f      	cmp	r1, #111	; 0x6f
 800161e:	d020      	beq.n	8001662 <_printf_i+0xb2>
 8001620:	2970      	cmp	r1, #112	; 0x70
 8001622:	d1dd      	bne.n	80015e0 <_printf_i+0x30>
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	f043 0320 	orr.w	r3, r3, #32
 800162a:	6023      	str	r3, [r4, #0]
 800162c:	e003      	b.n	8001636 <_printf_i+0x86>
 800162e:	2975      	cmp	r1, #117	; 0x75
 8001630:	d017      	beq.n	8001662 <_printf_i+0xb2>
 8001632:	2978      	cmp	r1, #120	; 0x78
 8001634:	d1d4      	bne.n	80015e0 <_printf_i+0x30>
 8001636:	2378      	movs	r3, #120	; 0x78
 8001638:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800163c:	4864      	ldr	r0, [pc, #400]	; (80017d0 <_printf_i+0x220>)
 800163e:	e055      	b.n	80016ec <_printf_i+0x13c>
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	1d19      	adds	r1, r3, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6011      	str	r1, [r2, #0]
 8001648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800164c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001650:	2301      	movs	r3, #1
 8001652:	e08c      	b.n	800176e <_printf_i+0x1be>
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6011      	str	r1, [r2, #0]
 8001658:	f010 0f40 	tst.w	r0, #64	; 0x40
 800165c:	bf18      	it	ne
 800165e:	b21b      	sxthne	r3, r3
 8001660:	e7cf      	b.n	8001602 <_printf_i+0x52>
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	6825      	ldr	r5, [r4, #0]
 8001666:	1d18      	adds	r0, r3, #4
 8001668:	6010      	str	r0, [r2, #0]
 800166a:	0628      	lsls	r0, r5, #24
 800166c:	d501      	bpl.n	8001672 <_printf_i+0xc2>
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	e002      	b.n	8001678 <_printf_i+0xc8>
 8001672:	0668      	lsls	r0, r5, #25
 8001674:	d5fb      	bpl.n	800166e <_printf_i+0xbe>
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	4854      	ldr	r0, [pc, #336]	; (80017cc <_printf_i+0x21c>)
 800167a:	296f      	cmp	r1, #111	; 0x6f
 800167c:	bf14      	ite	ne
 800167e:	220a      	movne	r2, #10
 8001680:	2208      	moveq	r2, #8
 8001682:	2100      	movs	r1, #0
 8001684:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001688:	6865      	ldr	r5, [r4, #4]
 800168a:	60a5      	str	r5, [r4, #8]
 800168c:	2d00      	cmp	r5, #0
 800168e:	f2c0 8095 	blt.w	80017bc <_printf_i+0x20c>
 8001692:	6821      	ldr	r1, [r4, #0]
 8001694:	f021 0104 	bic.w	r1, r1, #4
 8001698:	6021      	str	r1, [r4, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d13d      	bne.n	800171a <_printf_i+0x16a>
 800169e:	2d00      	cmp	r5, #0
 80016a0:	f040 808e 	bne.w	80017c0 <_printf_i+0x210>
 80016a4:	4665      	mov	r5, ip
 80016a6:	2a08      	cmp	r2, #8
 80016a8:	d10b      	bne.n	80016c2 <_printf_i+0x112>
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	07db      	lsls	r3, r3, #31
 80016ae:	d508      	bpl.n	80016c2 <_printf_i+0x112>
 80016b0:	6923      	ldr	r3, [r4, #16]
 80016b2:	6862      	ldr	r2, [r4, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	bfde      	ittt	le
 80016b8:	2330      	movle	r3, #48	; 0x30
 80016ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80016be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80016c2:	ebac 0305 	sub.w	r3, ip, r5
 80016c6:	6123      	str	r3, [r4, #16]
 80016c8:	f8cd 8000 	str.w	r8, [sp]
 80016cc:	463b      	mov	r3, r7
 80016ce:	aa03      	add	r2, sp, #12
 80016d0:	4621      	mov	r1, r4
 80016d2:	4630      	mov	r0, r6
 80016d4:	f7ff fef6 	bl	80014c4 <_printf_common>
 80016d8:	3001      	adds	r0, #1
 80016da:	d14d      	bne.n	8001778 <_printf_i+0x1c8>
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	b005      	add	sp, #20
 80016e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016e6:	4839      	ldr	r0, [pc, #228]	; (80017cc <_printf_i+0x21c>)
 80016e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80016ec:	6813      	ldr	r3, [r2, #0]
 80016ee:	6821      	ldr	r1, [r4, #0]
 80016f0:	1d1d      	adds	r5, r3, #4
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6015      	str	r5, [r2, #0]
 80016f6:	060a      	lsls	r2, r1, #24
 80016f8:	d50b      	bpl.n	8001712 <_printf_i+0x162>
 80016fa:	07ca      	lsls	r2, r1, #31
 80016fc:	bf44      	itt	mi
 80016fe:	f041 0120 	orrmi.w	r1, r1, #32
 8001702:	6021      	strmi	r1, [r4, #0]
 8001704:	b91b      	cbnz	r3, 800170e <_printf_i+0x15e>
 8001706:	6822      	ldr	r2, [r4, #0]
 8001708:	f022 0220 	bic.w	r2, r2, #32
 800170c:	6022      	str	r2, [r4, #0]
 800170e:	2210      	movs	r2, #16
 8001710:	e7b7      	b.n	8001682 <_printf_i+0xd2>
 8001712:	064d      	lsls	r5, r1, #25
 8001714:	bf48      	it	mi
 8001716:	b29b      	uxthmi	r3, r3
 8001718:	e7ef      	b.n	80016fa <_printf_i+0x14a>
 800171a:	4665      	mov	r5, ip
 800171c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001720:	fb02 3311 	mls	r3, r2, r1, r3
 8001724:	5cc3      	ldrb	r3, [r0, r3]
 8001726:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800172a:	460b      	mov	r3, r1
 800172c:	2900      	cmp	r1, #0
 800172e:	d1f5      	bne.n	800171c <_printf_i+0x16c>
 8001730:	e7b9      	b.n	80016a6 <_printf_i+0xf6>
 8001732:	6813      	ldr	r3, [r2, #0]
 8001734:	6825      	ldr	r5, [r4, #0]
 8001736:	6961      	ldr	r1, [r4, #20]
 8001738:	1d18      	adds	r0, r3, #4
 800173a:	6010      	str	r0, [r2, #0]
 800173c:	0628      	lsls	r0, r5, #24
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	d501      	bpl.n	8001746 <_printf_i+0x196>
 8001742:	6019      	str	r1, [r3, #0]
 8001744:	e002      	b.n	800174c <_printf_i+0x19c>
 8001746:	066a      	lsls	r2, r5, #25
 8001748:	d5fb      	bpl.n	8001742 <_printf_i+0x192>
 800174a:	8019      	strh	r1, [r3, #0]
 800174c:	2300      	movs	r3, #0
 800174e:	6123      	str	r3, [r4, #16]
 8001750:	4665      	mov	r5, ip
 8001752:	e7b9      	b.n	80016c8 <_printf_i+0x118>
 8001754:	6813      	ldr	r3, [r2, #0]
 8001756:	1d19      	adds	r1, r3, #4
 8001758:	6011      	str	r1, [r2, #0]
 800175a:	681d      	ldr	r5, [r3, #0]
 800175c:	6862      	ldr	r2, [r4, #4]
 800175e:	2100      	movs	r1, #0
 8001760:	4628      	mov	r0, r5
 8001762:	f7fe fd45 	bl	80001f0 <memchr>
 8001766:	b108      	cbz	r0, 800176c <_printf_i+0x1bc>
 8001768:	1b40      	subs	r0, r0, r5
 800176a:	6060      	str	r0, [r4, #4]
 800176c:	6863      	ldr	r3, [r4, #4]
 800176e:	6123      	str	r3, [r4, #16]
 8001770:	2300      	movs	r3, #0
 8001772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001776:	e7a7      	b.n	80016c8 <_printf_i+0x118>
 8001778:	6923      	ldr	r3, [r4, #16]
 800177a:	462a      	mov	r2, r5
 800177c:	4639      	mov	r1, r7
 800177e:	4630      	mov	r0, r6
 8001780:	47c0      	blx	r8
 8001782:	3001      	adds	r0, #1
 8001784:	d0aa      	beq.n	80016dc <_printf_i+0x12c>
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	079b      	lsls	r3, r3, #30
 800178a:	d413      	bmi.n	80017b4 <_printf_i+0x204>
 800178c:	68e0      	ldr	r0, [r4, #12]
 800178e:	9b03      	ldr	r3, [sp, #12]
 8001790:	4298      	cmp	r0, r3
 8001792:	bfb8      	it	lt
 8001794:	4618      	movlt	r0, r3
 8001796:	e7a3      	b.n	80016e0 <_printf_i+0x130>
 8001798:	2301      	movs	r3, #1
 800179a:	464a      	mov	r2, r9
 800179c:	4639      	mov	r1, r7
 800179e:	4630      	mov	r0, r6
 80017a0:	47c0      	blx	r8
 80017a2:	3001      	adds	r0, #1
 80017a4:	d09a      	beq.n	80016dc <_printf_i+0x12c>
 80017a6:	3501      	adds	r5, #1
 80017a8:	68e3      	ldr	r3, [r4, #12]
 80017aa:	9a03      	ldr	r2, [sp, #12]
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	42ab      	cmp	r3, r5
 80017b0:	dcf2      	bgt.n	8001798 <_printf_i+0x1e8>
 80017b2:	e7eb      	b.n	800178c <_printf_i+0x1dc>
 80017b4:	2500      	movs	r5, #0
 80017b6:	f104 0919 	add.w	r9, r4, #25
 80017ba:	e7f5      	b.n	80017a8 <_printf_i+0x1f8>
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ac      	bne.n	800171a <_printf_i+0x16a>
 80017c0:	7803      	ldrb	r3, [r0, #0]
 80017c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017ca:	e76c      	b.n	80016a6 <_printf_i+0xf6>
 80017cc:	08001a4d 	.word	0x08001a4d
 80017d0:	08001a5e 	.word	0x08001a5e

080017d4 <_sbrk_r>:
 80017d4:	b538      	push	{r3, r4, r5, lr}
 80017d6:	4c06      	ldr	r4, [pc, #24]	; (80017f0 <_sbrk_r+0x1c>)
 80017d8:	2300      	movs	r3, #0
 80017da:	4605      	mov	r5, r0
 80017dc:	4608      	mov	r0, r1
 80017de:	6023      	str	r3, [r4, #0]
 80017e0:	f7ff f8e6 	bl	80009b0 <_sbrk>
 80017e4:	1c43      	adds	r3, r0, #1
 80017e6:	d102      	bne.n	80017ee <_sbrk_r+0x1a>
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	b103      	cbz	r3, 80017ee <_sbrk_r+0x1a>
 80017ec:	602b      	str	r3, [r5, #0]
 80017ee:	bd38      	pop	{r3, r4, r5, pc}
 80017f0:	200000e4 	.word	0x200000e4

080017f4 <__sread>:
 80017f4:	b510      	push	{r4, lr}
 80017f6:	460c      	mov	r4, r1
 80017f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017fc:	f000 f896 	bl	800192c <_read_r>
 8001800:	2800      	cmp	r0, #0
 8001802:	bfab      	itete	ge
 8001804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001806:	89a3      	ldrhlt	r3, [r4, #12]
 8001808:	181b      	addge	r3, r3, r0
 800180a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800180e:	bfac      	ite	ge
 8001810:	6563      	strge	r3, [r4, #84]	; 0x54
 8001812:	81a3      	strhlt	r3, [r4, #12]
 8001814:	bd10      	pop	{r4, pc}

08001816 <__swrite>:
 8001816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800181a:	461f      	mov	r7, r3
 800181c:	898b      	ldrh	r3, [r1, #12]
 800181e:	05db      	lsls	r3, r3, #23
 8001820:	4605      	mov	r5, r0
 8001822:	460c      	mov	r4, r1
 8001824:	4616      	mov	r6, r2
 8001826:	d505      	bpl.n	8001834 <__swrite+0x1e>
 8001828:	2302      	movs	r3, #2
 800182a:	2200      	movs	r2, #0
 800182c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001830:	f000 f868 	bl	8001904 <_lseek_r>
 8001834:	89a3      	ldrh	r3, [r4, #12]
 8001836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800183a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800183e:	81a3      	strh	r3, [r4, #12]
 8001840:	4632      	mov	r2, r6
 8001842:	463b      	mov	r3, r7
 8001844:	4628      	mov	r0, r5
 8001846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800184a:	f000 b817 	b.w	800187c <_write_r>

0800184e <__sseek>:
 800184e:	b510      	push	{r4, lr}
 8001850:	460c      	mov	r4, r1
 8001852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001856:	f000 f855 	bl	8001904 <_lseek_r>
 800185a:	1c43      	adds	r3, r0, #1
 800185c:	89a3      	ldrh	r3, [r4, #12]
 800185e:	bf15      	itete	ne
 8001860:	6560      	strne	r0, [r4, #84]	; 0x54
 8001862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800186a:	81a3      	strheq	r3, [r4, #12]
 800186c:	bf18      	it	ne
 800186e:	81a3      	strhne	r3, [r4, #12]
 8001870:	bd10      	pop	{r4, pc}

08001872 <__sclose>:
 8001872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001876:	f000 b813 	b.w	80018a0 <_close_r>
	...

0800187c <_write_r>:
 800187c:	b538      	push	{r3, r4, r5, lr}
 800187e:	4c07      	ldr	r4, [pc, #28]	; (800189c <_write_r+0x20>)
 8001880:	4605      	mov	r5, r0
 8001882:	4608      	mov	r0, r1
 8001884:	4611      	mov	r1, r2
 8001886:	2200      	movs	r2, #0
 8001888:	6022      	str	r2, [r4, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	f7ff f83f 	bl	800090e <_write>
 8001890:	1c43      	adds	r3, r0, #1
 8001892:	d102      	bne.n	800189a <_write_r+0x1e>
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	b103      	cbz	r3, 800189a <_write_r+0x1e>
 8001898:	602b      	str	r3, [r5, #0]
 800189a:	bd38      	pop	{r3, r4, r5, pc}
 800189c:	200000e4 	.word	0x200000e4

080018a0 <_close_r>:
 80018a0:	b538      	push	{r3, r4, r5, lr}
 80018a2:	4c06      	ldr	r4, [pc, #24]	; (80018bc <_close_r+0x1c>)
 80018a4:	2300      	movs	r3, #0
 80018a6:	4605      	mov	r5, r0
 80018a8:	4608      	mov	r0, r1
 80018aa:	6023      	str	r3, [r4, #0]
 80018ac:	f7ff f84b 	bl	8000946 <_close>
 80018b0:	1c43      	adds	r3, r0, #1
 80018b2:	d102      	bne.n	80018ba <_close_r+0x1a>
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	b103      	cbz	r3, 80018ba <_close_r+0x1a>
 80018b8:	602b      	str	r3, [r5, #0]
 80018ba:	bd38      	pop	{r3, r4, r5, pc}
 80018bc:	200000e4 	.word	0x200000e4

080018c0 <_fstat_r>:
 80018c0:	b538      	push	{r3, r4, r5, lr}
 80018c2:	4c07      	ldr	r4, [pc, #28]	; (80018e0 <_fstat_r+0x20>)
 80018c4:	2300      	movs	r3, #0
 80018c6:	4605      	mov	r5, r0
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	6023      	str	r3, [r4, #0]
 80018ce:	f7ff f846 	bl	800095e <_fstat>
 80018d2:	1c43      	adds	r3, r0, #1
 80018d4:	d102      	bne.n	80018dc <_fstat_r+0x1c>
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	b103      	cbz	r3, 80018dc <_fstat_r+0x1c>
 80018da:	602b      	str	r3, [r5, #0]
 80018dc:	bd38      	pop	{r3, r4, r5, pc}
 80018de:	bf00      	nop
 80018e0:	200000e4 	.word	0x200000e4

080018e4 <_isatty_r>:
 80018e4:	b538      	push	{r3, r4, r5, lr}
 80018e6:	4c06      	ldr	r4, [pc, #24]	; (8001900 <_isatty_r+0x1c>)
 80018e8:	2300      	movs	r3, #0
 80018ea:	4605      	mov	r5, r0
 80018ec:	4608      	mov	r0, r1
 80018ee:	6023      	str	r3, [r4, #0]
 80018f0:	f7ff f845 	bl	800097e <_isatty>
 80018f4:	1c43      	adds	r3, r0, #1
 80018f6:	d102      	bne.n	80018fe <_isatty_r+0x1a>
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	b103      	cbz	r3, 80018fe <_isatty_r+0x1a>
 80018fc:	602b      	str	r3, [r5, #0]
 80018fe:	bd38      	pop	{r3, r4, r5, pc}
 8001900:	200000e4 	.word	0x200000e4

08001904 <_lseek_r>:
 8001904:	b538      	push	{r3, r4, r5, lr}
 8001906:	4c07      	ldr	r4, [pc, #28]	; (8001924 <_lseek_r+0x20>)
 8001908:	4605      	mov	r5, r0
 800190a:	4608      	mov	r0, r1
 800190c:	4611      	mov	r1, r2
 800190e:	2200      	movs	r2, #0
 8001910:	6022      	str	r2, [r4, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	f7ff f83e 	bl	8000994 <_lseek>
 8001918:	1c43      	adds	r3, r0, #1
 800191a:	d102      	bne.n	8001922 <_lseek_r+0x1e>
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	b103      	cbz	r3, 8001922 <_lseek_r+0x1e>
 8001920:	602b      	str	r3, [r5, #0]
 8001922:	bd38      	pop	{r3, r4, r5, pc}
 8001924:	200000e4 	.word	0x200000e4

08001928 <__malloc_lock>:
 8001928:	4770      	bx	lr

0800192a <__malloc_unlock>:
 800192a:	4770      	bx	lr

0800192c <_read_r>:
 800192c:	b538      	push	{r3, r4, r5, lr}
 800192e:	4c07      	ldr	r4, [pc, #28]	; (800194c <_read_r+0x20>)
 8001930:	4605      	mov	r5, r0
 8001932:	4608      	mov	r0, r1
 8001934:	4611      	mov	r1, r2
 8001936:	2200      	movs	r2, #0
 8001938:	6022      	str	r2, [r4, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	f7fe ffca 	bl	80008d4 <_read>
 8001940:	1c43      	adds	r3, r0, #1
 8001942:	d102      	bne.n	800194a <_read_r+0x1e>
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	b103      	cbz	r3, 800194a <_read_r+0x1e>
 8001948:	602b      	str	r3, [r5, #0]
 800194a:	bd38      	pop	{r3, r4, r5, pc}
 800194c:	200000e4 	.word	0x200000e4

08001950 <_init>:
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	bf00      	nop
 8001954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001956:	bc08      	pop	{r3}
 8001958:	469e      	mov	lr, r3
 800195a:	4770      	bx	lr

0800195c <_fini>:
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	bf00      	nop
 8001960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001962:	bc08      	pop	{r3}
 8001964:	469e      	mov	lr, r3
 8001966:	4770      	bx	lr
